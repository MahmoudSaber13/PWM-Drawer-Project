
PWM_Drawer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000056c  00800060  000010ec  00001180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008005cc  008005cc  000016ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001748  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000172d  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000935  00000000  00000000  00002fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b5  00000000  00000000  000038f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  000042ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e5  00000000  00000000  000044e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a85  00000000  00000000  000049cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005452  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	15 e0       	ldi	r17, 0x05	; 5
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 3c       	cpi	r26, 0xCC	; 204
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	25 e0       	ldi	r18, 0x05	; 5
      78:	ac ec       	ldi	r26, 0xCC	; 204
      7a:	b5 e0       	ldi	r27, 0x05	; 5
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <main>
      8a:	0c 94 74 08 	jmp	0x10e8	; 0x10e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <floatToString>:
/*****************************************************************/


/*This function is used to convert float number to string*/
void floatToString(float value, char* buffer, int bufferSize, int precision)
{
      92:	6f 92       	push	r6
      94:	7f 92       	push	r7
      96:	8f 92       	push	r8
      98:	9f 92       	push	r9
      9a:	af 92       	push	r10
      9c:	bf 92       	push	r11
      9e:	cf 92       	push	r12
      a0:	df 92       	push	r13
      a2:	ef 92       	push	r14
      a4:	ff 92       	push	r15
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
      ac:	df 93       	push	r29
      ae:	4b 01       	movw	r8, r22
      b0:	5c 01       	movw	r10, r24
      b2:	ea 01       	movw	r28, r20
      b4:	39 01       	movw	r6, r18
	// Handle negative numbers
	if (value < 0) {
      b6:	20 e0       	ldi	r18, 0x00	; 0
      b8:	30 e0       	ldi	r19, 0x00	; 0
      ba:	a9 01       	movw	r20, r18
      bc:	0e 94 00 04 	call	0x800	; 0x800 <__cmpsf2>
      c0:	88 23       	and	r24, r24
      c2:	3c f4       	brge	.+14     	; 0xd2 <floatToString+0x40>
		*buffer++ = '-';
      c4:	8d e2       	ldi	r24, 0x2D	; 45
      c6:	88 83       	st	Y, r24
		value = -value;
      c8:	b7 fa       	bst	r11, 7
      ca:	b0 94       	com	r11
      cc:	b7 f8       	bld	r11, 7
      ce:	b0 94       	com	r11
/*This function is used to convert float number to string*/
void floatToString(float value, char* buffer, int bufferSize, int precision)
{
	// Handle negative numbers
	if (value < 0) {
		*buffer++ = '-';
      d0:	21 96       	adiw	r28, 0x01	; 1
		value = -value;
	}

	// Extract integer part
	int intPart = (int)value;
      d2:	c5 01       	movw	r24, r10
      d4:	b4 01       	movw	r22, r8
      d6:	0e 94 05 04 	call	0x80a	; 0x80a <__fixsfsi>
      da:	6b 01       	movw	r12, r22
      dc:	7c 01       	movw	r14, r24
	int length = snprintf(buffer, bufferSize, "%d", intPart);
      de:	df 92       	push	r13
      e0:	6f 93       	push	r22
      e2:	87 eb       	ldi	r24, 0xB7	; 183
      e4:	95 e0       	ldi	r25, 0x05	; 5
      e6:	9f 93       	push	r25
      e8:	8f 93       	push	r24
      ea:	7f 92       	push	r7
      ec:	6f 92       	push	r6
      ee:	df 93       	push	r29
      f0:	cf 93       	push	r28
      f2:	0e 94 5a 05 	call	0xab4	; 0xab4 <snprintf>
	buffer += length;
      f6:	fe 01       	movw	r30, r28
      f8:	e8 0f       	add	r30, r24
      fa:	f9 1f       	adc	r31, r25
	bufferSize -= length;
      fc:	68 1a       	sub	r6, r24
      fe:	79 0a       	sbc	r7, r25

	// Check if precision is required
	if (precision > 0) {
     100:	8d b7       	in	r24, 0x3d	; 61
     102:	9e b7       	in	r25, 0x3e	; 62
     104:	08 96       	adiw	r24, 0x08	; 8
     106:	0f b6       	in	r0, 0x3f	; 63
     108:	f8 94       	cli
     10a:	9e bf       	out	0x3e, r25	; 62
     10c:	0f be       	out	0x3f, r0	; 63
     10e:	8d bf       	out	0x3d, r24	; 61
     110:	10 16       	cp	r1, r16
     112:	11 06       	cpc	r1, r17
     114:	f4 f5       	brge	.+124    	; 0x192 <floatToString+0x100>
		// Add decimal point
		if (bufferSize > 1) {
     116:	92 e0       	ldi	r25, 0x02	; 2
     118:	69 16       	cp	r6, r25
     11a:	71 04       	cpc	r7, r1
     11c:	2c f0       	brlt	.+10     	; 0x128 <floatToString+0x96>
			*buffer++ = '.';
     11e:	ef 01       	movw	r28, r30
     120:	21 96       	adiw	r28, 0x01	; 1
     122:	8e e2       	ldi	r24, 0x2E	; 46
     124:	80 83       	st	Z, r24
     126:	01 c0       	rjmp	.+2      	; 0x12a <floatToString+0x98>
	}

	// Extract integer part
	int intPart = (int)value;
	int length = snprintf(buffer, bufferSize, "%d", intPart);
	buffer += length;
     128:	ef 01       	movw	r28, r30
			*buffer++ = '.';
			bufferSize--;
		}

		// Extract fractional part
		float fracPart = value - intPart;
     12a:	b6 01       	movw	r22, r12
     12c:	dd 0c       	add	r13, r13
     12e:	88 0b       	sbc	r24, r24
     130:	99 0b       	sbc	r25, r25
     132:	0e 94 3d 04 	call	0x87a	; 0x87a <__floatsisf>
     136:	9b 01       	movw	r18, r22
     138:	ac 01       	movw	r20, r24
     13a:	c5 01       	movw	r24, r10
     13c:	b4 01       	movw	r22, r8
     13e:	0e 94 93 03 	call	0x726	; 0x726 <__subsf3>
		for (int i = 0; i < precision; ++i) {
     142:	e1 2c       	mov	r14, r1
     144:	f1 2c       	mov	r15, r1
     146:	21 c0       	rjmp	.+66     	; 0x18a <floatToString+0xf8>
			fracPart *= 10;
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	40 e2       	ldi	r20, 0x20	; 32
     14e:	51 e4       	ldi	r21, 0x41	; 65
     150:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3>
     154:	4b 01       	movw	r8, r22
     156:	5c 01       	movw	r10, r24
			int digit = (int)fracPart;
     158:	0e 94 05 04 	call	0x80a	; 0x80a <__fixsfsi>
			*buffer++ = '0' + digit;
     15c:	6e 01       	movw	r12, r28
     15e:	2f ef       	ldi	r18, 0xFF	; 255
     160:	c2 1a       	sub	r12, r18
     162:	d2 0a       	sbc	r13, r18
     164:	20 e3       	ldi	r18, 0x30	; 48
     166:	26 0f       	add	r18, r22
     168:	28 83       	st	Y, r18
			bufferSize--;
			fracPart -= digit;
     16a:	07 2e       	mov	r0, r23
     16c:	00 0c       	add	r0, r0
     16e:	88 0b       	sbc	r24, r24
     170:	99 0b       	sbc	r25, r25
     172:	0e 94 3d 04 	call	0x87a	; 0x87a <__floatsisf>
     176:	9b 01       	movw	r18, r22
     178:	ac 01       	movw	r20, r24
     17a:	c5 01       	movw	r24, r10
     17c:	b4 01       	movw	r22, r8
     17e:	0e 94 93 03 	call	0x726	; 0x726 <__subsf3>
			bufferSize--;
		}

		// Extract fractional part
		float fracPart = value - intPart;
		for (int i = 0; i < precision; ++i) {
     182:	2f ef       	ldi	r18, 0xFF	; 255
     184:	e2 1a       	sub	r14, r18
     186:	f2 0a       	sbc	r15, r18
			fracPart *= 10;
			int digit = (int)fracPart;
			*buffer++ = '0' + digit;
     188:	e6 01       	movw	r28, r12
			bufferSize--;
		}

		// Extract fractional part
		float fracPart = value - intPart;
		for (int i = 0; i < precision; ++i) {
     18a:	e0 16       	cp	r14, r16
     18c:	f1 06       	cpc	r15, r17
     18e:	e4 f2       	brlt	.-72     	; 0x148 <floatToString+0xb6>
     190:	01 c0       	rjmp	.+2      	; 0x194 <floatToString+0x102>
	}

	// Extract integer part
	int intPart = (int)value;
	int length = snprintf(buffer, bufferSize, "%d", intPart);
	buffer += length;
     192:	ef 01       	movw	r28, r30
			fracPart -= digit;
		}
	}

	// Null-terminate the string
	*buffer = '\0';
     194:	18 82       	st	Y, r1
}
     196:	df 91       	pop	r29
     198:	cf 91       	pop	r28
     19a:	1f 91       	pop	r17
     19c:	0f 91       	pop	r16
     19e:	ff 90       	pop	r15
     1a0:	ef 90       	pop	r14
     1a2:	df 90       	pop	r13
     1a4:	cf 90       	pop	r12
     1a6:	bf 90       	pop	r11
     1a8:	af 90       	pop	r10
     1aa:	9f 90       	pop	r9
     1ac:	8f 90       	pop	r8
     1ae:	7f 90       	pop	r7
     1b0:	6f 90       	pop	r6
     1b2:	08 95       	ret

000001b4 <display>:
char percent[2]= "%";


/*This function is used to display the Results on the GLCD*/
void display()
{
     1b4:	0f 93       	push	r16
     1b6:	1f 93       	push	r17
     1b8:	cf 93       	push	r28
     1ba:	df 93       	push	r29
		unsigned char z;
		
		f= ((F_CPU/1000000)*(3.906));
     1bc:	87 ee       	ldi	r24, 0xE7	; 231
     1be:	9b ef       	ldi	r25, 0xFB	; 251
     1c0:	a9 e7       	ldi	r26, 0x79	; 121
     1c2:	b0 e4       	ldi	r27, 0x40	; 64
     1c4:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <__data_end>
     1c8:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <__data_end+0x1>
     1cc:	a0 93 ce 05 	sts	0x05CE, r26	; 0x8005ce <__data_end+0x2>
     1d0:	b0 93 cf 05 	sts	0x05CF, r27	; 0x8005cf <__data_end+0x3>
		
		floatToString(f, fre, 10, 3);
     1d4:	03 e0       	ldi	r16, 0x03	; 3
     1d6:	10 e0       	ldi	r17, 0x00	; 0
     1d8:	2a e0       	ldi	r18, 0x0A	; 10
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	44 ee       	ldi	r20, 0xE4	; 228
     1de:	55 e0       	ldi	r21, 0x05	; 5
     1e0:	bc 01       	movw	r22, r24
     1e2:	cd 01       	movw	r24, r26
     1e4:	0e 94 49 00 	call	0x92	; 0x92 <floatToString>
		//res_str(freq,fre,result);
		glcd_writeStr(0, freq,0,0);
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	40 e0       	ldi	r20, 0x00	; 0
     1ec:	6c e6       	ldi	r22, 0x6C	; 108
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		glcd_writeStr(0,fre,0,20);
     1f6:	24 e1       	ldi	r18, 0x14	; 20
     1f8:	40 e0       	ldi	r20, 0x00	; 0
     1fa:	64 ee       	ldi	r22, 0xE4	; 228
     1fc:	75 e0       	ldi	r23, 0x05	; 5
     1fe:	80 e0       	ldi	r24, 0x00	; 0
     200:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		glcd_writeStr(1, "KHZ",0,0);
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	6a eb       	ldi	r22, 0xBA	; 186
     20a:	75 e0       	ldi	r23, 0x05	; 5
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		
		z= UART_receivechar();
     212:	0e 94 8f 03 	call	0x71e	; 0x71e <UART_receivechar>
     216:	c8 2f       	mov	r28, r24
		sprintf(duty_cy, "%u", z);
     218:	1f 92       	push	r1
     21a:	8f 93       	push	r24
     21c:	8e eb       	ldi	r24, 0xBE	; 190
     21e:	95 e0       	ldi	r25, 0x05	; 5
     220:	9f 93       	push	r25
     222:	8f 93       	push	r24
     224:	80 ed       	ldi	r24, 0xD0	; 208
     226:	95 e0       	ldi	r25, 0x05	; 5
     228:	9f 93       	push	r25
     22a:	8f 93       	push	r24
     22c:	0e 94 8a 05 	call	0xb14	; 0xb14 <sprintf>
		glcd_writeStr(0,"Dut_Cy:",2,0);
     230:	20 e0       	ldi	r18, 0x00	; 0
     232:	42 e0       	ldi	r20, 0x02	; 2
     234:	61 ec       	ldi	r22, 0xC1	; 193
     236:	75 e0       	ldi	r23, 0x05	; 5
     238:	80 e0       	ldi	r24, 0x00	; 0
     23a:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		glcd_writeStr(0,duty_cy,2,42);
     23e:	2a e2       	ldi	r18, 0x2A	; 42
     240:	42 e0       	ldi	r20, 0x02	; 2
     242:	60 ed       	ldi	r22, 0xD0	; 208
     244:	75 e0       	ldi	r23, 0x05	; 5
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		
		if(z<100 && z!=0)
     24c:	df ef       	ldi	r29, 0xFF	; 255
     24e:	dc 0f       	add	r29, r28
     250:	0f 90       	pop	r0
     252:	0f 90       	pop	r0
     254:	0f 90       	pop	r0
     256:	0f 90       	pop	r0
     258:	0f 90       	pop	r0
     25a:	0f 90       	pop	r0
     25c:	d3 36       	cpi	r29, 0x63	; 99
     25e:	40 f4       	brcc	.+16     	; 0x270 <display+0xbc>
		glcd_writeStr(0," \0",2,54);
     260:	26 e3       	ldi	r18, 0x36	; 54
     262:	42 e0       	ldi	r20, 0x02	; 2
     264:	66 e9       	ldi	r22, 0x96	; 150
     266:	74 e0       	ldi	r23, 0x04	; 4
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
     26e:	11 c0       	rjmp	.+34     	; 0x292 <display+0xde>
		
		else if(z>=0 && z<10)
     270:	ca 30       	cpi	r28, 0x0A	; 10
     272:	40 f4       	brcc	.+16     	; 0x284 <display+0xd0>
		glcd_writeStr(0,"  \0",2,47);
     274:	2f e2       	ldi	r18, 0x2F	; 47
     276:	42 e0       	ldi	r20, 0x02	; 2
     278:	69 e9       	ldi	r22, 0x99	; 153
     27a:	74 e0       	ldi	r23, 0x04	; 4
     27c:	80 e0       	ldi	r24, 0x00	; 0
     27e:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
     282:	07 c0       	rjmp	.+14     	; 0x292 <display+0xde>
		
		else
		glcd_writeStr(0,duty_cy,2,42);
     284:	2a e2       	ldi	r18, 0x2A	; 42
     286:	42 e0       	ldi	r20, 0x02	; 2
     288:	60 ed       	ldi	r22, 0xD0	; 208
     28a:	75 e0       	ldi	r23, 0x05	; 5
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		
		glcd_writeStr(1,percent,2,0);
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	42 e0       	ldi	r20, 0x02	; 2
     296:	60 e6       	ldi	r22, 0x60	; 96
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	81 e0       	ldi	r24, 0x01	; 1
     29c:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		
		float time_ms=(t*0.001);
     2a0:	60 91 ee 05 	lds	r22, 0x05EE	; 0x8005ee <t>
     2a4:	70 91 ef 05 	lds	r23, 0x05EF	; 0x8005ef <t+0x1>
     2a8:	80 e0       	ldi	r24, 0x00	; 0
     2aa:	90 e0       	ldi	r25, 0x00	; 0
     2ac:	0e 94 3b 04 	call	0x876	; 0x876 <__floatunsisf>
     2b0:	2f e6       	ldi	r18, 0x6F	; 111
     2b2:	32 e1       	ldi	r19, 0x12	; 18
     2b4:	43 e8       	ldi	r20, 0x83	; 131
     2b6:	5a e3       	ldi	r21, 0x3A	; 58
     2b8:	0e 94 ed 04 	call	0x9da	; 0x9da <__mulsf3>
		floatToString(time_ms, tm, 10, 3);
     2bc:	03 e0       	ldi	r16, 0x03	; 3
     2be:	10 e0       	ldi	r17, 0x00	; 0
     2c0:	2a e0       	ldi	r18, 0x0A	; 10
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	4a ed       	ldi	r20, 0xDA	; 218
     2c6:	55 e0       	ldi	r21, 0x05	; 5
     2c8:	0e 94 49 00 	call	0x92	; 0x92 <floatToString>
		
		glcd_writeStr(0, time,4,0);
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	44 e0       	ldi	r20, 0x04	; 4
     2d0:	62 e6       	ldi	r22, 0x62	; 98
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		glcd_writeStr(0, tm,4,30);
     2da:	2e e1       	ldi	r18, 0x1E	; 30
     2dc:	44 e0       	ldi	r20, 0x04	; 4
     2de:	6a ed       	ldi	r22, 0xDA	; 218
     2e0:	75 e0       	ldi	r23, 0x05	; 5
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		glcd_writeStr(1, "mS",4,0);
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	44 e0       	ldi	r20, 0x04	; 4
     2ec:	69 ec       	ldi	r22, 0xC9	; 201
     2ee:	75 e0       	ldi	r23, 0x05	; 5
     2f0:	81 e0       	ldi	r24, 0x01	; 1
     2f2:	0e 94 b6 02 	call	0x56c	; 0x56c <glcd_writeStr>
		  ___     ___     ___     ___
		_|   |___|   |___|   |___|
		
		*/
		
		if(z>=40 && z<=60)
     2f6:	88 ed       	ldi	r24, 0xD8	; 216
     2f8:	8c 0f       	add	r24, r28
     2fa:	85 31       	cpi	r24, 0x15	; 21
     2fc:	20 f5       	brcc	.+72     	; 0x346 <display+0x192>
		{
			glcd_drawStr(0, " <--T-->\0",5,0);
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	45 e0       	ldi	r20, 0x05	; 5
     302:	6d e9       	ldi	r22, 0x9D	; 157
     304:	74 e0       	ldi	r23, 0x04	; 4
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "  __    __   \0",6,0);
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	46 e0       	ldi	r20, 0x06	; 6
     310:	67 ea       	ldi	r22, 0xA7	; 167
     312:	74 e0       	ldi	r23, 0x04	; 4
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "_|  |__|  |__\0",7,0);
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	47 e0       	ldi	r20, 0x07	; 7
     31e:	66 eb       	ldi	r22, 0xB6	; 182
     320:	74 e0       	ldi	r23, 0x04	; 4
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, " __    __  \0",6,0);
     328:	20 e0       	ldi	r18, 0x00	; 0
     32a:	46 e0       	ldi	r20, 0x06	; 6
     32c:	65 ec       	ldi	r22, 0xC5	; 197
     32e:	74 e0       	ldi	r23, 0x04	; 4
     330:	81 e0       	ldi	r24, 0x01	; 1
     332:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, "|  |__|  |_\0",7,0);
     336:	20 e0       	ldi	r18, 0x00	; 0
     338:	47 e0       	ldi	r20, 0x07	; 7
     33a:	62 ed       	ldi	r22, 0xD2	; 210
     33c:	74 e0       	ldi	r23, 0x04	; 4
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
     344:	bc c0       	rjmp	.+376    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		}
		
		else if(z==0)
     346:	c1 11       	cpse	r28, r1
     348:	24 c0       	rjmp	.+72     	; 0x392 <display+0x1de>
		{
			glcd_drawStr(0, " <--T-->\0",5,0);
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	45 e0       	ldi	r20, 0x05	; 5
     34e:	6d e9       	ldi	r22, 0x9D	; 157
     350:	74 e0       	ldi	r23, 0x04	; 4
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "             \0",6,0);
     358:	20 e0       	ldi	r18, 0x00	; 0
     35a:	46 e0       	ldi	r20, 0x06	; 6
     35c:	6f ed       	ldi	r22, 0xDF	; 223
     35e:	74 e0       	ldi	r23, 0x04	; 4
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "|____________\0",7,0);
     366:	20 e0       	ldi	r18, 0x00	; 0
     368:	47 e0       	ldi	r20, 0x07	; 7
     36a:	6e ee       	ldi	r22, 0xEE	; 238
     36c:	74 e0       	ldi	r23, 0x04	; 4
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, "_____________\0",7,0);
     374:	20 e0       	ldi	r18, 0x00	; 0
     376:	47 e0       	ldi	r20, 0x07	; 7
     378:	6d ef       	ldi	r22, 0xFD	; 253
     37a:	74 e0       	ldi	r23, 0x04	; 4
     37c:	81 e0       	ldi	r24, 0x01	; 1
     37e:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, "             \0",6,0);
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	46 e0       	ldi	r20, 0x06	; 6
     386:	6f ed       	ldi	r22, 0xDF	; 223
     388:	74 e0       	ldi	r23, 0x04	; 4
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
     390:	96 c0       	rjmp	.+300    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		}
		else if(z==100)
     392:	c4 36       	cpi	r28, 0x64	; 100
     394:	21 f5       	brne	.+72     	; 0x3de <display+0x22a>
		{
			glcd_drawStr(0, " <--T-->\0",5,0);
     396:	20 e0       	ldi	r18, 0x00	; 0
     398:	45 e0       	ldi	r20, 0x05	; 5
     39a:	6d e9       	ldi	r22, 0x9D	; 157
     39c:	74 e0       	ldi	r23, 0x04	; 4
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, " ____________\0",6,0);
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	46 e0       	ldi	r20, 0x06	; 6
     3a8:	6c e0       	ldi	r22, 0x0C	; 12
     3aa:	75 e0       	ldi	r23, 0x05	; 5
     3ac:	80 e0       	ldi	r24, 0x00	; 0
     3ae:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "|            \0",7,0);
     3b2:	20 e0       	ldi	r18, 0x00	; 0
     3b4:	47 e0       	ldi	r20, 0x07	; 7
     3b6:	6b e1       	ldi	r22, 0x1B	; 27
     3b8:	75 e0       	ldi	r23, 0x05	; 5
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			
			glcd_drawStr(1, "___________\0",6,0);
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	46 e0       	ldi	r20, 0x06	; 6
     3c4:	6a e2       	ldi	r22, 0x2A	; 42
     3c6:	75 e0       	ldi	r23, 0x05	; 5
     3c8:	81 e0       	ldi	r24, 0x01	; 1
     3ca:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, "            \0",7,0);
     3ce:	20 e0       	ldi	r18, 0x00	; 0
     3d0:	47 e0       	ldi	r20, 0x07	; 7
     3d2:	67 e3       	ldi	r22, 0x37	; 55
     3d4:	75 e0       	ldi	r23, 0x05	; 5
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
     3dc:	70 c0       	rjmp	.+224    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
		}
		
		else if(z>0 && z<40)
     3de:	d7 32       	cpi	r29, 0x27	; 39
     3e0:	20 f5       	brcc	.+72     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			glcd_drawStr(0, " <--T-->\0",5,0);
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	45 e0       	ldi	r20, 0x05	; 5
     3e6:	6d e9       	ldi	r22, 0x9D	; 157
     3e8:	74 e0       	ldi	r23, 0x04	; 4
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "  _     _    \0",6,0);
     3f0:	20 e0       	ldi	r18, 0x00	; 0
     3f2:	46 e0       	ldi	r20, 0x06	; 6
     3f4:	65 e4       	ldi	r22, 0x45	; 69
     3f6:	75 e0       	ldi	r23, 0x05	; 5
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "_| |___| |___\0",7,0);
     3fe:	20 e0       	ldi	r18, 0x00	; 0
     400:	47 e0       	ldi	r20, 0x07	; 7
     402:	64 e5       	ldi	r22, 0x54	; 84
     404:	75 e0       	ldi	r23, 0x05	; 5
     406:	80 e0       	ldi	r24, 0x00	; 0
     408:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, " _     _   \0",6,0);
     40c:	20 e0       	ldi	r18, 0x00	; 0
     40e:	46 e0       	ldi	r20, 0x06	; 6
     410:	63 e6       	ldi	r22, 0x63	; 99
     412:	75 e0       	ldi	r23, 0x05	; 5
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, "| |___| |__\0",7,0);
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	47 e0       	ldi	r20, 0x07	; 7
     41e:	60 e7       	ldi	r22, 0x70	; 112
     420:	75 e0       	ldi	r23, 0x05	; 5
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
     428:	4a c0       	rjmp	.+148    	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			
		}
		
		else if(z>60 && z<100)
     42a:	cd 53       	subi	r28, 0x3D	; 61
     42c:	c7 32       	cpi	r28, 0x27	; 39
     42e:	20 f5       	brcc	.+72     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
		{
			glcd_drawStr(0, " <--T-->\0",5,0);
     430:	20 e0       	ldi	r18, 0x00	; 0
     432:	45 e0       	ldi	r20, 0x05	; 5
     434:	6d e9       	ldi	r22, 0x9D	; 157
     436:	74 e0       	ldi	r23, 0x04	; 4
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "  ___   ___  \0",6,0);
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	46 e0       	ldi	r20, 0x06	; 6
     442:	6d e7       	ldi	r22, 0x7D	; 125
     444:	75 e0       	ldi	r23, 0x05	; 5
     446:	80 e0       	ldi	r24, 0x00	; 0
     448:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "_|   |_|   |_\0",7,0);
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	47 e0       	ldi	r20, 0x07	; 7
     450:	6c e8       	ldi	r22, 0x8C	; 140
     452:	75 e0       	ldi	r23, 0x05	; 5
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, " ___   ___  \0",6,0);
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	46 e0       	ldi	r20, 0x06	; 6
     45e:	6b e9       	ldi	r22, 0x9B	; 155
     460:	75 e0       	ldi	r23, 0x05	; 5
     462:	81 e0       	ldi	r24, 0x01	; 1
     464:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, "|   |_|   |_\0",7,0);
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	47 e0       	ldi	r20, 0x07	; 7
     46c:	69 ea       	ldi	r22, 0xA9	; 169
     46e:	75 e0       	ldi	r23, 0x05	; 5
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
     476:	23 c0       	rjmp	.+70     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
			
		}
		
		else
		{
			glcd_drawStr(0, " <--T-->\0",5,0);
     478:	20 e0       	ldi	r18, 0x00	; 0
     47a:	45 e0       	ldi	r20, 0x05	; 5
     47c:	6d e9       	ldi	r22, 0x9D	; 157
     47e:	74 e0       	ldi	r23, 0x04	; 4
     480:	80 e0       	ldi	r24, 0x00	; 0
     482:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "  __    __   \0",6,0);
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	46 e0       	ldi	r20, 0x06	; 6
     48a:	67 ea       	ldi	r22, 0xA7	; 167
     48c:	74 e0       	ldi	r23, 0x04	; 4
     48e:	80 e0       	ldi	r24, 0x00	; 0
     490:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(0, "_|  |__|  |__\0",7,0);
     494:	20 e0       	ldi	r18, 0x00	; 0
     496:	47 e0       	ldi	r20, 0x07	; 7
     498:	66 eb       	ldi	r22, 0xB6	; 182
     49a:	74 e0       	ldi	r23, 0x04	; 4
     49c:	80 e0       	ldi	r24, 0x00	; 0
     49e:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, " __    __  \0",6,0);
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	46 e0       	ldi	r20, 0x06	; 6
     4a6:	65 ec       	ldi	r22, 0xC5	; 197
     4a8:	74 e0       	ldi	r23, 0x04	; 4
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
			glcd_drawStr(1, "|  |__|  |_\0",7,0);
     4b0:	20 e0       	ldi	r18, 0x00	; 0
     4b2:	47 e0       	ldi	r20, 0x07	; 7
     4b4:	62 ed       	ldi	r22, 0xD2	; 210
     4b6:	74 e0       	ldi	r23, 0x04	; 4
     4b8:	81 e0       	ldi	r24, 0x01	; 1
     4ba:	0e 94 20 03 	call	0x640	; 0x640 <glcd_drawStr>
		}
		
		//glcd_drawStr(0, "123456789abc_\0",7,0);
}
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	1f 91       	pop	r17
     4c4:	0f 91       	pop	r16
     4c6:	08 95       	ret

000004c8 <glcd_send_com>:


/*Function to send commands to GLCD*/
void glcd_send_com(uint8_t com)
{
	data_port = com;
     4c8:	8b bb       	out	0x1b, r24	; 27
	clearbit(com_port, RS);
     4ca:	85 b3       	in	r24, 0x15	; 21
     4cc:	8e 7f       	andi	r24, 0xFE	; 254
     4ce:	85 bb       	out	0x15, r24	; 21
	clearbit(com_port, RW);
     4d0:	85 b3       	in	r24, 0x15	; 21
     4d2:	8d 7f       	andi	r24, 0xFD	; 253
     4d4:	85 bb       	out	0x15, r24	; 21
	setbit(com_port, EN);
     4d6:	85 b3       	in	r24, 0x15	; 21
     4d8:	84 60       	ori	r24, 0x04	; 4
     4da:	85 bb       	out	0x15, r24	; 21
	delay(100);
	clearbit(com_port, EN);
     4dc:	85 b3       	in	r24, 0x15	; 21
     4de:	8b 7f       	andi	r24, 0xFB	; 251
     4e0:	85 bb       	out	0x15, r24	; 21
     4e2:	08 95       	ret

000004e4 <glcd_send_data>:
}

/*Function to send Data to GLCD*/
void glcd_send_data(uint8_t data)
{
	data_port = data;
     4e4:	8b bb       	out	0x1b, r24	; 27
	setbit(com_port, RS);
     4e6:	85 b3       	in	r24, 0x15	; 21
     4e8:	81 60       	ori	r24, 0x01	; 1
     4ea:	85 bb       	out	0x15, r24	; 21
	clearbit(com_port, RW);
     4ec:	85 b3       	in	r24, 0x15	; 21
     4ee:	8d 7f       	andi	r24, 0xFD	; 253
     4f0:	85 bb       	out	0x15, r24	; 21
	setbit(com_port, EN);
     4f2:	85 b3       	in	r24, 0x15	; 21
     4f4:	84 60       	ori	r24, 0x04	; 4
     4f6:	85 bb       	out	0x15, r24	; 21
	delay(100);
	clearbit(com_port, EN);
     4f8:	85 b3       	in	r24, 0x15	; 21
     4fa:	8b 7f       	andi	r24, 0xFB	; 251
     4fc:	85 bb       	out	0x15, r24	; 21
     4fe:	08 95       	ret

00000500 <glcd_pageSelect>:


/*GLCD has two pages, this function is used to choose the pages*/
void glcd_pageSelect(char page)
{
	switch(page)
     500:	81 30       	cpi	r24, 0x01	; 1
     502:	69 f0       	breq	.+26     	; 0x51e <glcd_pageSelect+0x1e>
     504:	28 f0       	brcs	.+10     	; 0x510 <glcd_pageSelect+0x10>
     506:	82 30       	cpi	r24, 0x02	; 2
     508:	89 f0       	breq	.+34     	; 0x52c <glcd_pageSelect+0x2c>
     50a:	83 30       	cpi	r24, 0x03	; 3
     50c:	b1 f0       	breq	.+44     	; 0x53a <glcd_pageSelect+0x3a>
     50e:	1c c0       	rjmp	.+56     	; 0x548 <glcd_pageSelect+0x48>
	{
		case 0:
		clearbit(com_port, CS2);
     510:	85 b3       	in	r24, 0x15	; 21
     512:	8f 7d       	andi	r24, 0xDF	; 223
     514:	85 bb       	out	0x15, r24	; 21
		setbit(com_port, CS1);
     516:	85 b3       	in	r24, 0x15	; 21
     518:	80 61       	ori	r24, 0x10	; 16
     51a:	85 bb       	out	0x15, r24	; 21
		break;
     51c:	08 95       	ret
		
		case 1:
		clearbit(com_port, CS1);
     51e:	85 b3       	in	r24, 0x15	; 21
     520:	8f 7e       	andi	r24, 0xEF	; 239
     522:	85 bb       	out	0x15, r24	; 21
		setbit(com_port, CS2);
     524:	85 b3       	in	r24, 0x15	; 21
     526:	80 62       	ori	r24, 0x20	; 32
     528:	85 bb       	out	0x15, r24	; 21
		break;
     52a:	08 95       	ret
		
		case 2:
		setbit(com_port, CS1);
     52c:	85 b3       	in	r24, 0x15	; 21
     52e:	80 61       	ori	r24, 0x10	; 16
     530:	85 bb       	out	0x15, r24	; 21
		setbit(com_port, CS2);
     532:	85 b3       	in	r24, 0x15	; 21
     534:	80 62       	ori	r24, 0x20	; 32
     536:	85 bb       	out	0x15, r24	; 21
		break;
     538:	08 95       	ret
		
		case 3:
		clearbit(com_port, CS1);
     53a:	85 b3       	in	r24, 0x15	; 21
     53c:	8f 7e       	andi	r24, 0xEF	; 239
     53e:	85 bb       	out	0x15, r24	; 21
		clearbit(com_port, CS2);
     540:	85 b3       	in	r24, 0x15	; 21
     542:	8f 7d       	andi	r24, 0xDF	; 223
     544:	85 bb       	out	0x15, r24	; 21
		break;
     546:	08 95       	ret
		
		default:
		setbit(com_port, CS1);
     548:	85 b3       	in	r24, 0x15	; 21
     54a:	80 61       	ori	r24, 0x10	; 16
     54c:	85 bb       	out	0x15, r24	; 21
		setbit(com_port, CS2);
     54e:	85 b3       	in	r24, 0x15	; 21
     550:	80 62       	ori	r24, 0x20	; 32
     552:	85 bb       	out	0x15, r24	; 21
     554:	08 95       	ret

00000556 <glcd_setCursor>:
	}
}

/*This function is used to move in x and y directions on the GLCD*/
void glcd_setCursor(uint8_t x, uint8_t y)
{
     556:	cf 93       	push	r28
     558:	c6 2f       	mov	r28, r22
	glcd_send_com(0xB8+x);
     55a:	88 54       	subi	r24, 0x48	; 72
     55c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <glcd_send_com>
	glcd_send_com(0x40+y);
     560:	80 e4       	ldi	r24, 0x40	; 64
     562:	8c 0f       	add	r24, r28
     564:	0e 94 64 02 	call	0x4c8	; 0x4c8 <glcd_send_com>
}
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <glcd_writeStr>:


/*This Function is used to write string on a specific location*/
void glcd_writeStr(char page, char *str, uint8_t x, uint8_t y)
{
     56c:	ef 92       	push	r14
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	7b 01       	movw	r14, r22
     57a:	c4 2f       	mov	r28, r20
     57c:	d2 2f       	mov	r29, r18
	int i=0;
	int startfont=0, endFont=0;
	glcd_pageSelect(page);
     57e:	0e 94 80 02 	call	0x500	; 0x500 <glcd_pageSelect>
	glcd_setCursor(x,y);
     582:	6d 2f       	mov	r22, r29
     584:	8c 2f       	mov	r24, r28
     586:	0e 94 ab 02 	call	0x556	; 0x556 <glcd_setCursor>
	while(*str)
     58a:	1b c0       	rjmp	.+54     	; 0x5c2 <glcd_writeStr+0x56>
	{
		startfont= (*str -32)*6;
     58c:	10 e0       	ldi	r17, 0x00	; 0
     58e:	00 52       	subi	r16, 0x20	; 32
     590:	11 09       	sbc	r17, r1
     592:	c8 01       	movw	r24, r16
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	08 0f       	add	r16, r24
     59a:	19 1f       	adc	r17, r25
     59c:	00 0f       	add	r16, r16
     59e:	11 1f       	adc	r17, r17
     5a0:	e8 01       	movw	r28, r16
		endFont= startfont + 6;
     5a2:	0a 5f       	subi	r16, 0xFA	; 250
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
		for(i=startfont; i<endFont; i++)
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <glcd_writeStr+0x4a>
		{
			glcd_send_data(sys5x7[i]);
     5a8:	fe 01       	movw	r30, r28
     5aa:	ea 58       	subi	r30, 0x8A	; 138
     5ac:	ff 4f       	sbci	r31, 0xFF	; 255
     5ae:	80 81       	ld	r24, Z
     5b0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <glcd_send_data>
	glcd_setCursor(x,y);
	while(*str)
	{
		startfont= (*str -32)*6;
		endFont= startfont + 6;
		for(i=startfont; i<endFont; i++)
     5b4:	21 96       	adiw	r28, 0x01	; 1
     5b6:	c0 17       	cp	r28, r16
     5b8:	d1 07       	cpc	r29, r17
     5ba:	b4 f3       	brlt	.-20     	; 0x5a8 <glcd_writeStr+0x3c>
		{
			glcd_send_data(sys5x7[i]);
			delay(1000);
		}
		str++;
     5bc:	8f ef       	ldi	r24, 0xFF	; 255
     5be:	e8 1a       	sub	r14, r24
     5c0:	f8 0a       	sbc	r15, r24
{
	int i=0;
	int startfont=0, endFont=0;
	glcd_pageSelect(page);
	glcd_setCursor(x,y);
	while(*str)
     5c2:	f7 01       	movw	r30, r14
     5c4:	00 81       	ld	r16, Z
     5c6:	01 11       	cpse	r16, r1
     5c8:	e1 cf       	rjmp	.-62     	; 0x58c <glcd_writeStr+0x20>
			glcd_send_data(sys5x7[i]);
			delay(1000);
		}
		str++;
	}
}
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	ef 90       	pop	r14
     5d6:	08 95       	ret

000005d8 <glcd_init>:


/*This Function is used to make initialization for our GLCD*/
void glcd_init()
{
	com_dir= 0xff;
     5d8:	8f ef       	ldi	r24, 0xFF	; 255
     5da:	84 bb       	out	0x14, r24	; 20
	data_dir= 0xFF;
     5dc:	8a bb       	out	0x1a, r24	; 26
	
	clearbit(com_port,RST);
     5de:	85 b3       	in	r24, 0x15	; 21
     5e0:	87 7f       	andi	r24, 0xF7	; 247
     5e2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5e4:	83 ec       	ldi	r24, 0xC3	; 195
     5e6:	99 e0       	ldi	r25, 0x09	; 9
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	f1 f7       	brne	.-4      	; 0x5e8 <glcd_init+0x10>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <glcd_init+0x16>
     5ee:	00 00       	nop
	_delay_ms(10);
	setbit(com_port,RST);
     5f0:	85 b3       	in	r24, 0x15	; 21
     5f2:	88 60       	ori	r24, 0x08	; 8
     5f4:	85 bb       	out	0x15, r24	; 21
     5f6:	89 ef       	ldi	r24, 0xF9	; 249
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	f1 f7       	brne	.-4      	; 0x5fa <glcd_init+0x22>
     5fe:	00 c0       	rjmp	.+0      	; 0x600 <glcd_init+0x28>
     600:	00 00       	nop
	_delay_ms(1);
	glcd_pageSelect(2);
     602:	82 e0       	ldi	r24, 0x02	; 2
     604:	0e 94 80 02 	call	0x500	; 0x500 <glcd_pageSelect>
     608:	89 ef       	ldi	r24, 0xF9	; 249
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	01 97       	sbiw	r24, 0x01	; 1
     60e:	f1 f7       	brne	.-4      	; 0x60c <glcd_init+0x34>
     610:	00 c0       	rjmp	.+0      	; 0x612 <glcd_init+0x3a>
     612:	00 00       	nop
	_delay_ms(1);
	glcd_send_com(0x3F);
     614:	8f e3       	ldi	r24, 0x3F	; 63
     616:	0e 94 64 02 	call	0x4c8	; 0x4c8 <glcd_send_com>
	glcd_send_com(0xc0);
     61a:	80 ec       	ldi	r24, 0xC0	; 192
     61c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <glcd_send_com>
     620:	89 ef       	ldi	r24, 0xF9	; 249
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <glcd_init+0x4c>
     628:	00 c0       	rjmp	.+0      	; 0x62a <glcd_init+0x52>
     62a:	00 00       	nop
	_delay_ms(1);
	glcd_pageSelect(1);
     62c:	81 e0       	ldi	r24, 0x01	; 1
     62e:	0e 94 80 02 	call	0x500	; 0x500 <glcd_pageSelect>
     632:	89 ef       	ldi	r24, 0xF9	; 249
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <glcd_init+0x5e>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <glcd_init+0x64>
     63c:	00 00       	nop
     63e:	08 95       	ret

00000640 <glcd_drawStr>:
}


/*This Function is used to draw on the GLCD*/
void glcd_drawStr(char page, char *str, uint8_t x, uint8_t y)
{
     640:	ef 92       	push	r14
     642:	ff 92       	push	r15
     644:	0f 93       	push	r16
     646:	1f 93       	push	r17
     648:	cf 93       	push	r28
     64a:	df 93       	push	r29
     64c:	8b 01       	movw	r16, r22
     64e:	c4 2f       	mov	r28, r20
     650:	d2 2f       	mov	r29, r18
	int i=0;
	int startfont=0, endFont=0;
	glcd_pageSelect(page);
     652:	0e 94 80 02 	call	0x500	; 0x500 <glcd_pageSelect>
	glcd_setCursor(x,y);
     656:	6d 2f       	mov	r22, r29
     658:	8c 2f       	mov	r24, r28
     65a:	0e 94 ab 02 	call	0x556	; 0x556 <glcd_setCursor>
	while(*str)
     65e:	1a c0       	rjmp	.+52     	; 0x694 <glcd_drawStr+0x54>
	{
		startfont= (*str -32)*5;
     660:	d0 e0       	ldi	r29, 0x00	; 0
     662:	a0 97       	sbiw	r28, 0x20	; 32
     664:	ce 01       	movw	r24, r28
     666:	88 0f       	add	r24, r24
     668:	99 1f       	adc	r25, r25
     66a:	88 0f       	add	r24, r24
     66c:	99 1f       	adc	r25, r25
     66e:	c8 0f       	add	r28, r24
     670:	d9 1f       	adc	r29, r25
		endFont= startfont + 5;
     672:	7e 01       	movw	r14, r28
     674:	85 e0       	ldi	r24, 0x05	; 5
     676:	e8 0e       	add	r14, r24
     678:	f1 1c       	adc	r15, r1
		for(i=startfont; i<endFont; i++)
     67a:	07 c0       	rjmp	.+14     	; 0x68a <glcd_drawStr+0x4a>
		{
			glcd_send_data(sys5x6[i]);
     67c:	fe 01       	movw	r30, r28
     67e:	ea 54       	subi	r30, 0x4A	; 74
     680:	fd 4f       	sbci	r31, 0xFD	; 253
     682:	80 81       	ld	r24, Z
     684:	0e 94 72 02 	call	0x4e4	; 0x4e4 <glcd_send_data>
	glcd_setCursor(x,y);
	while(*str)
	{
		startfont= (*str -32)*5;
		endFont= startfont + 5;
		for(i=startfont; i<endFont; i++)
     688:	21 96       	adiw	r28, 0x01	; 1
     68a:	ce 15       	cp	r28, r14
     68c:	df 05       	cpc	r29, r15
     68e:	b4 f3       	brlt	.-20     	; 0x67c <glcd_drawStr+0x3c>
		{
			glcd_send_data(sys5x6[i]);
			delay(1000);
		}
		str++;
     690:	0f 5f       	subi	r16, 0xFF	; 255
     692:	1f 4f       	sbci	r17, 0xFF	; 255
{
	int i=0;
	int startfont=0, endFont=0;
	glcd_pageSelect(page);
	glcd_setCursor(x,y);
	while(*str)
     694:	f8 01       	movw	r30, r16
     696:	c0 81       	ld	r28, Z
     698:	c1 11       	cpse	r28, r1
     69a:	e2 cf       	rjmp	.-60     	; 0x660 <glcd_drawStr+0x20>
			glcd_send_data(sys5x6[i]);
			delay(1000);
		}
		str++;
	}
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	1f 91       	pop	r17
     6a2:	0f 91       	pop	r16
     6a4:	ff 90       	pop	r15
     6a6:	ef 90       	pop	r14
     6a8:	08 95       	ret

000006aa <icu_init>:
unsigned int t;

/*This function is used to make Initialization for ICU*/
void icu_init()
{
	setbit(PORTD,PD6);
     6aa:	82 b3       	in	r24, 0x12	; 18
     6ac:	80 64       	ori	r24, 0x40	; 64
     6ae:	82 bb       	out	0x12, r24	; 18
	
	TCCR1A= 0;
     6b0:	1f bc       	out	0x2f, r1	; 47
	TIFR= 1<<ICF1;
     6b2:	80 e2       	ldi	r24, 0x20	; 32
     6b4:	88 bf       	out	0x38, r24	; 56
	TCCR1B= 0x41;
     6b6:	81 e4       	ldi	r24, 0x41	; 65
     6b8:	8e bd       	out	0x2e, r24	; 46
     6ba:	08 95       	ret

000006bc <icu_on>:
}

/*This function is used to calculate the time period of the signal.*/
void icu_on()
{
	while((TIFR&(1<<ICF1))==0);
     6bc:	08 b6       	in	r0, 0x38	; 56
     6be:	05 fe       	sbrs	r0, 5
     6c0:	fd cf       	rjmp	.-6      	; 0x6bc <icu_on>
	t= ICR1;
     6c2:	86 b5       	in	r24, 0x26	; 38
     6c4:	97 b5       	in	r25, 0x27	; 39
     6c6:	90 93 ef 05 	sts	0x05EF, r25	; 0x8005ef <t+0x1>
     6ca:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <t>
	
	TIFR= 1<<ICF1;
     6ce:	80 e2       	ldi	r24, 0x20	; 32
     6d0:	88 bf       	out	0x38, r24	; 56
	while((TIFR&(1<<ICF1))==0);
     6d2:	08 b6       	in	r0, 0x38	; 56
     6d4:	05 fe       	sbrs	r0, 5
     6d6:	fd cf       	rjmp	.-6      	; 0x6d2 <icu_on+0x16>
	t= ICR1 - t;
     6d8:	86 b5       	in	r24, 0x26	; 38
     6da:	97 b5       	in	r25, 0x27	; 39
     6dc:	20 91 ee 05 	lds	r18, 0x05EE	; 0x8005ee <t>
     6e0:	30 91 ef 05 	lds	r19, 0x05EF	; 0x8005ef <t+0x1>
     6e4:	82 1b       	sub	r24, r18
     6e6:	93 0b       	sbc	r25, r19
     6e8:	90 93 ef 05 	sts	0x05EF, r25	; 0x8005ef <t+0x1>
     6ec:	80 93 ee 05 	sts	0x05EE, r24	; 0x8005ee <t>
     6f0:	08 95       	ret

000006f2 <main>:


int main(void)
{
	
	glcd_init();
     6f2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <glcd_init>
	icu_init();
     6f6:	0e 94 55 03 	call	0x6aa	; 0x6aa <icu_init>
	UART_INIT(6);
     6fa:	86 e0       	ldi	r24, 0x06	; 6
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 86 03 	call	0x70c	; 0x70c <UART_INIT>
	
    while (1) 
    {
		icu_on();
     702:	0e 94 5e 03 	call	0x6bc	; 0x6bc <icu_on>
		display();
     706:	0e 94 da 00 	call	0x1b4	; 0x1b4 <display>
     70a:	fb cf       	rjmp	.-10     	; 0x702 <main+0x10>

0000070c <UART_INIT>:
	while(readbit(UCSRA,UDRE)==0)// wait the reg to be empty
	{	;	}
	UDR = data; // send  data
	while(readbit(UCSRA,TXC)==0)// wait till the data to be send
	{	;	}
}
     70c:	2a b1       	in	r18, 0x0a	; 10
     70e:	28 61       	ori	r18, 0x18	; 24
     710:	2a b9       	out	0x0a, r18	; 10
     712:	20 b5       	in	r18, 0x20	; 32
     714:	26 68       	ori	r18, 0x86	; 134
     716:	20 bd       	out	0x20, r18	; 32
     718:	89 b9       	out	0x09, r24	; 9
     71a:	90 bd       	out	0x20, r25	; 32
     71c:	08 95       	ret

0000071e <UART_receivechar>:


/*This function is used to receive 1 byte of data*/
unsigned char UART_receivechar()
{
	while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
     71e:	5f 9b       	sbis	0x0b, 7	; 11
     720:	fe cf       	rjmp	.-4      	; 0x71e <UART_receivechar>
	return(UDR);			/* Return the byte*/
     722:	8c b1       	in	r24, 0x0c	; 12
}
     724:	08 95       	ret

00000726 <__subsf3>:
     726:	50 58       	subi	r21, 0x80	; 128

00000728 <__addsf3>:
     728:	bb 27       	eor	r27, r27
     72a:	aa 27       	eor	r26, r26
     72c:	0e 94 ab 03 	call	0x756	; 0x756 <__addsf3x>
     730:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_round>
     734:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscA>
     738:	38 f0       	brcs	.+14     	; 0x748 <__addsf3+0x20>
     73a:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_pscB>
     73e:	20 f0       	brcs	.+8      	; 0x748 <__addsf3+0x20>
     740:	39 f4       	brne	.+14     	; 0x750 <__addsf3+0x28>
     742:	9f 3f       	cpi	r25, 0xFF	; 255
     744:	19 f4       	brne	.+6      	; 0x74c <__addsf3+0x24>
     746:	26 f4       	brtc	.+8      	; 0x750 <__addsf3+0x28>
     748:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_nan>
     74c:	0e f4       	brtc	.+2      	; 0x750 <__addsf3+0x28>
     74e:	e0 95       	com	r30
     750:	e7 fb       	bst	r30, 7
     752:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>

00000756 <__addsf3x>:
     756:	e9 2f       	mov	r30, r25
     758:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_split3>
     75c:	58 f3       	brcs	.-42     	; 0x734 <__addsf3+0xc>
     75e:	ba 17       	cp	r27, r26
     760:	62 07       	cpc	r22, r18
     762:	73 07       	cpc	r23, r19
     764:	84 07       	cpc	r24, r20
     766:	95 07       	cpc	r25, r21
     768:	20 f0       	brcs	.+8      	; 0x772 <__addsf3x+0x1c>
     76a:	79 f4       	brne	.+30     	; 0x78a <__addsf3x+0x34>
     76c:	a6 f5       	brtc	.+104    	; 0x7d6 <__addsf3x+0x80>
     76e:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_zero>
     772:	0e f4       	brtc	.+2      	; 0x776 <__addsf3x+0x20>
     774:	e0 95       	com	r30
     776:	0b 2e       	mov	r0, r27
     778:	ba 2f       	mov	r27, r26
     77a:	a0 2d       	mov	r26, r0
     77c:	0b 01       	movw	r0, r22
     77e:	b9 01       	movw	r22, r18
     780:	90 01       	movw	r18, r0
     782:	0c 01       	movw	r0, r24
     784:	ca 01       	movw	r24, r20
     786:	a0 01       	movw	r20, r0
     788:	11 24       	eor	r1, r1
     78a:	ff 27       	eor	r31, r31
     78c:	59 1b       	sub	r21, r25
     78e:	99 f0       	breq	.+38     	; 0x7b6 <__addsf3x+0x60>
     790:	59 3f       	cpi	r21, 0xF9	; 249
     792:	50 f4       	brcc	.+20     	; 0x7a8 <__addsf3x+0x52>
     794:	50 3e       	cpi	r21, 0xE0	; 224
     796:	68 f1       	brcs	.+90     	; 0x7f2 <__addsf3x+0x9c>
     798:	1a 16       	cp	r1, r26
     79a:	f0 40       	sbci	r31, 0x00	; 0
     79c:	a2 2f       	mov	r26, r18
     79e:	23 2f       	mov	r18, r19
     7a0:	34 2f       	mov	r19, r20
     7a2:	44 27       	eor	r20, r20
     7a4:	58 5f       	subi	r21, 0xF8	; 248
     7a6:	f3 cf       	rjmp	.-26     	; 0x78e <__addsf3x+0x38>
     7a8:	46 95       	lsr	r20
     7aa:	37 95       	ror	r19
     7ac:	27 95       	ror	r18
     7ae:	a7 95       	ror	r26
     7b0:	f0 40       	sbci	r31, 0x00	; 0
     7b2:	53 95       	inc	r21
     7b4:	c9 f7       	brne	.-14     	; 0x7a8 <__addsf3x+0x52>
     7b6:	7e f4       	brtc	.+30     	; 0x7d6 <__addsf3x+0x80>
     7b8:	1f 16       	cp	r1, r31
     7ba:	ba 0b       	sbc	r27, r26
     7bc:	62 0b       	sbc	r22, r18
     7be:	73 0b       	sbc	r23, r19
     7c0:	84 0b       	sbc	r24, r20
     7c2:	ba f0       	brmi	.+46     	; 0x7f2 <__addsf3x+0x9c>
     7c4:	91 50       	subi	r25, 0x01	; 1
     7c6:	a1 f0       	breq	.+40     	; 0x7f0 <__addsf3x+0x9a>
     7c8:	ff 0f       	add	r31, r31
     7ca:	bb 1f       	adc	r27, r27
     7cc:	66 1f       	adc	r22, r22
     7ce:	77 1f       	adc	r23, r23
     7d0:	88 1f       	adc	r24, r24
     7d2:	c2 f7       	brpl	.-16     	; 0x7c4 <__addsf3x+0x6e>
     7d4:	0e c0       	rjmp	.+28     	; 0x7f2 <__addsf3x+0x9c>
     7d6:	ba 0f       	add	r27, r26
     7d8:	62 1f       	adc	r22, r18
     7da:	73 1f       	adc	r23, r19
     7dc:	84 1f       	adc	r24, r20
     7de:	48 f4       	brcc	.+18     	; 0x7f2 <__addsf3x+0x9c>
     7e0:	87 95       	ror	r24
     7e2:	77 95       	ror	r23
     7e4:	67 95       	ror	r22
     7e6:	b7 95       	ror	r27
     7e8:	f7 95       	ror	r31
     7ea:	9e 3f       	cpi	r25, 0xFE	; 254
     7ec:	08 f0       	brcs	.+2      	; 0x7f0 <__addsf3x+0x9a>
     7ee:	b0 cf       	rjmp	.-160    	; 0x750 <__addsf3+0x28>
     7f0:	93 95       	inc	r25
     7f2:	88 0f       	add	r24, r24
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <__addsf3x+0xa2>
     7f6:	99 27       	eor	r25, r25
     7f8:	ee 0f       	add	r30, r30
     7fa:	97 95       	ror	r25
     7fc:	87 95       	ror	r24
     7fe:	08 95       	ret

00000800 <__cmpsf2>:
     800:	0e 94 78 04 	call	0x8f0	; 0x8f0 <__fp_cmp>
     804:	08 f4       	brcc	.+2      	; 0x808 <__cmpsf2+0x8>
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	08 95       	ret

0000080a <__fixsfsi>:
     80a:	0e 94 0c 04 	call	0x818	; 0x818 <__fixunssfsi>
     80e:	68 94       	set
     810:	b1 11       	cpse	r27, r1
     812:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
     816:	08 95       	ret

00000818 <__fixunssfsi>:
     818:	0e 94 cc 04 	call	0x998	; 0x998 <__fp_splitA>
     81c:	88 f0       	brcs	.+34     	; 0x840 <__fixunssfsi+0x28>
     81e:	9f 57       	subi	r25, 0x7F	; 127
     820:	98 f0       	brcs	.+38     	; 0x848 <__fixunssfsi+0x30>
     822:	b9 2f       	mov	r27, r25
     824:	99 27       	eor	r25, r25
     826:	b7 51       	subi	r27, 0x17	; 23
     828:	b0 f0       	brcs	.+44     	; 0x856 <__fixunssfsi+0x3e>
     82a:	e1 f0       	breq	.+56     	; 0x864 <__stack+0x5>
     82c:	66 0f       	add	r22, r22
     82e:	77 1f       	adc	r23, r23
     830:	88 1f       	adc	r24, r24
     832:	99 1f       	adc	r25, r25
     834:	1a f0       	brmi	.+6      	; 0x83c <__fixunssfsi+0x24>
     836:	ba 95       	dec	r27
     838:	c9 f7       	brne	.-14     	; 0x82c <__fixunssfsi+0x14>
     83a:	14 c0       	rjmp	.+40     	; 0x864 <__stack+0x5>
     83c:	b1 30       	cpi	r27, 0x01	; 1
     83e:	91 f0       	breq	.+36     	; 0x864 <__stack+0x5>
     840:	0e 94 e6 04 	call	0x9cc	; 0x9cc <__fp_zero>
     844:	b1 e0       	ldi	r27, 0x01	; 1
     846:	08 95       	ret
     848:	0c 94 e6 04 	jmp	0x9cc	; 0x9cc <__fp_zero>
     84c:	67 2f       	mov	r22, r23
     84e:	78 2f       	mov	r23, r24
     850:	88 27       	eor	r24, r24
     852:	b8 5f       	subi	r27, 0xF8	; 248
     854:	39 f0       	breq	.+14     	; 0x864 <__stack+0x5>
     856:	b9 3f       	cpi	r27, 0xF9	; 249
     858:	cc f3       	brlt	.-14     	; 0x84c <__fixunssfsi+0x34>
     85a:	86 95       	lsr	r24
     85c:	77 95       	ror	r23
     85e:	67 95       	ror	r22
     860:	b3 95       	inc	r27
     862:	d9 f7       	brne	.-10     	; 0x85a <__fixunssfsi+0x42>
     864:	3e f4       	brtc	.+14     	; 0x874 <__stack+0x15>
     866:	90 95       	com	r25
     868:	80 95       	com	r24
     86a:	70 95       	com	r23
     86c:	61 95       	neg	r22
     86e:	7f 4f       	sbci	r23, 0xFF	; 255
     870:	8f 4f       	sbci	r24, 0xFF	; 255
     872:	9f 4f       	sbci	r25, 0xFF	; 255
     874:	08 95       	ret

00000876 <__floatunsisf>:
     876:	e8 94       	clt
     878:	09 c0       	rjmp	.+18     	; 0x88c <__floatsisf+0x12>

0000087a <__floatsisf>:
     87a:	97 fb       	bst	r25, 7
     87c:	3e f4       	brtc	.+14     	; 0x88c <__floatsisf+0x12>
     87e:	90 95       	com	r25
     880:	80 95       	com	r24
     882:	70 95       	com	r23
     884:	61 95       	neg	r22
     886:	7f 4f       	sbci	r23, 0xFF	; 255
     888:	8f 4f       	sbci	r24, 0xFF	; 255
     88a:	9f 4f       	sbci	r25, 0xFF	; 255
     88c:	99 23       	and	r25, r25
     88e:	a9 f0       	breq	.+42     	; 0x8ba <__floatsisf+0x40>
     890:	f9 2f       	mov	r31, r25
     892:	96 e9       	ldi	r25, 0x96	; 150
     894:	bb 27       	eor	r27, r27
     896:	93 95       	inc	r25
     898:	f6 95       	lsr	r31
     89a:	87 95       	ror	r24
     89c:	77 95       	ror	r23
     89e:	67 95       	ror	r22
     8a0:	b7 95       	ror	r27
     8a2:	f1 11       	cpse	r31, r1
     8a4:	f8 cf       	rjmp	.-16     	; 0x896 <__floatsisf+0x1c>
     8a6:	fa f4       	brpl	.+62     	; 0x8e6 <__floatsisf+0x6c>
     8a8:	bb 0f       	add	r27, r27
     8aa:	11 f4       	brne	.+4      	; 0x8b0 <__floatsisf+0x36>
     8ac:	60 ff       	sbrs	r22, 0
     8ae:	1b c0       	rjmp	.+54     	; 0x8e6 <__floatsisf+0x6c>
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	7f 4f       	sbci	r23, 0xFF	; 255
     8b4:	8f 4f       	sbci	r24, 0xFF	; 255
     8b6:	9f 4f       	sbci	r25, 0xFF	; 255
     8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <__floatsisf+0x6c>
     8ba:	88 23       	and	r24, r24
     8bc:	11 f0       	breq	.+4      	; 0x8c2 <__floatsisf+0x48>
     8be:	96 e9       	ldi	r25, 0x96	; 150
     8c0:	11 c0       	rjmp	.+34     	; 0x8e4 <__floatsisf+0x6a>
     8c2:	77 23       	and	r23, r23
     8c4:	21 f0       	breq	.+8      	; 0x8ce <__floatsisf+0x54>
     8c6:	9e e8       	ldi	r25, 0x8E	; 142
     8c8:	87 2f       	mov	r24, r23
     8ca:	76 2f       	mov	r23, r22
     8cc:	05 c0       	rjmp	.+10     	; 0x8d8 <__floatsisf+0x5e>
     8ce:	66 23       	and	r22, r22
     8d0:	71 f0       	breq	.+28     	; 0x8ee <__floatsisf+0x74>
     8d2:	96 e8       	ldi	r25, 0x86	; 134
     8d4:	86 2f       	mov	r24, r22
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	2a f0       	brmi	.+10     	; 0x8e6 <__floatsisf+0x6c>
     8dc:	9a 95       	dec	r25
     8de:	66 0f       	add	r22, r22
     8e0:	77 1f       	adc	r23, r23
     8e2:	88 1f       	adc	r24, r24
     8e4:	da f7       	brpl	.-10     	; 0x8dc <__floatsisf+0x62>
     8e6:	88 0f       	add	r24, r24
     8e8:	96 95       	lsr	r25
     8ea:	87 95       	ror	r24
     8ec:	97 f9       	bld	r25, 7
     8ee:	08 95       	ret

000008f0 <__fp_cmp>:
     8f0:	99 0f       	add	r25, r25
     8f2:	00 08       	sbc	r0, r0
     8f4:	55 0f       	add	r21, r21
     8f6:	aa 0b       	sbc	r26, r26
     8f8:	e0 e8       	ldi	r30, 0x80	; 128
     8fa:	fe ef       	ldi	r31, 0xFE	; 254
     8fc:	16 16       	cp	r1, r22
     8fe:	17 06       	cpc	r1, r23
     900:	e8 07       	cpc	r30, r24
     902:	f9 07       	cpc	r31, r25
     904:	c0 f0       	brcs	.+48     	; 0x936 <__fp_cmp+0x46>
     906:	12 16       	cp	r1, r18
     908:	13 06       	cpc	r1, r19
     90a:	e4 07       	cpc	r30, r20
     90c:	f5 07       	cpc	r31, r21
     90e:	98 f0       	brcs	.+38     	; 0x936 <__fp_cmp+0x46>
     910:	62 1b       	sub	r22, r18
     912:	73 0b       	sbc	r23, r19
     914:	84 0b       	sbc	r24, r20
     916:	95 0b       	sbc	r25, r21
     918:	39 f4       	brne	.+14     	; 0x928 <__fp_cmp+0x38>
     91a:	0a 26       	eor	r0, r26
     91c:	61 f0       	breq	.+24     	; 0x936 <__fp_cmp+0x46>
     91e:	23 2b       	or	r18, r19
     920:	24 2b       	or	r18, r20
     922:	25 2b       	or	r18, r21
     924:	21 f4       	brne	.+8      	; 0x92e <__fp_cmp+0x3e>
     926:	08 95       	ret
     928:	0a 26       	eor	r0, r26
     92a:	09 f4       	brne	.+2      	; 0x92e <__fp_cmp+0x3e>
     92c:	a1 40       	sbci	r26, 0x01	; 1
     92e:	a6 95       	lsr	r26
     930:	8f ef       	ldi	r24, 0xFF	; 255
     932:	81 1d       	adc	r24, r1
     934:	81 1d       	adc	r24, r1
     936:	08 95       	ret

00000938 <__fp_inf>:
     938:	97 f9       	bld	r25, 7
     93a:	9f 67       	ori	r25, 0x7F	; 127
     93c:	80 e8       	ldi	r24, 0x80	; 128
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	08 95       	ret

00000944 <__fp_nan>:
     944:	9f ef       	ldi	r25, 0xFF	; 255
     946:	80 ec       	ldi	r24, 0xC0	; 192
     948:	08 95       	ret

0000094a <__fp_pscA>:
     94a:	00 24       	eor	r0, r0
     94c:	0a 94       	dec	r0
     94e:	16 16       	cp	r1, r22
     950:	17 06       	cpc	r1, r23
     952:	18 06       	cpc	r1, r24
     954:	09 06       	cpc	r0, r25
     956:	08 95       	ret

00000958 <__fp_pscB>:
     958:	00 24       	eor	r0, r0
     95a:	0a 94       	dec	r0
     95c:	12 16       	cp	r1, r18
     95e:	13 06       	cpc	r1, r19
     960:	14 06       	cpc	r1, r20
     962:	05 06       	cpc	r0, r21
     964:	08 95       	ret

00000966 <__fp_round>:
     966:	09 2e       	mov	r0, r25
     968:	03 94       	inc	r0
     96a:	00 0c       	add	r0, r0
     96c:	11 f4       	brne	.+4      	; 0x972 <__fp_round+0xc>
     96e:	88 23       	and	r24, r24
     970:	52 f0       	brmi	.+20     	; 0x986 <__fp_round+0x20>
     972:	bb 0f       	add	r27, r27
     974:	40 f4       	brcc	.+16     	; 0x986 <__fp_round+0x20>
     976:	bf 2b       	or	r27, r31
     978:	11 f4       	brne	.+4      	; 0x97e <__fp_round+0x18>
     97a:	60 ff       	sbrs	r22, 0
     97c:	04 c0       	rjmp	.+8      	; 0x986 <__fp_round+0x20>
     97e:	6f 5f       	subi	r22, 0xFF	; 255
     980:	7f 4f       	sbci	r23, 0xFF	; 255
     982:	8f 4f       	sbci	r24, 0xFF	; 255
     984:	9f 4f       	sbci	r25, 0xFF	; 255
     986:	08 95       	ret

00000988 <__fp_split3>:
     988:	57 fd       	sbrc	r21, 7
     98a:	90 58       	subi	r25, 0x80	; 128
     98c:	44 0f       	add	r20, r20
     98e:	55 1f       	adc	r21, r21
     990:	59 f0       	breq	.+22     	; 0x9a8 <__fp_splitA+0x10>
     992:	5f 3f       	cpi	r21, 0xFF	; 255
     994:	71 f0       	breq	.+28     	; 0x9b2 <__fp_splitA+0x1a>
     996:	47 95       	ror	r20

00000998 <__fp_splitA>:
     998:	88 0f       	add	r24, r24
     99a:	97 fb       	bst	r25, 7
     99c:	99 1f       	adc	r25, r25
     99e:	61 f0       	breq	.+24     	; 0x9b8 <__fp_splitA+0x20>
     9a0:	9f 3f       	cpi	r25, 0xFF	; 255
     9a2:	79 f0       	breq	.+30     	; 0x9c2 <__fp_splitA+0x2a>
     9a4:	87 95       	ror	r24
     9a6:	08 95       	ret
     9a8:	12 16       	cp	r1, r18
     9aa:	13 06       	cpc	r1, r19
     9ac:	14 06       	cpc	r1, r20
     9ae:	55 1f       	adc	r21, r21
     9b0:	f2 cf       	rjmp	.-28     	; 0x996 <__fp_split3+0xe>
     9b2:	46 95       	lsr	r20
     9b4:	f1 df       	rcall	.-30     	; 0x998 <__fp_splitA>
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <__fp_splitA+0x30>
     9b8:	16 16       	cp	r1, r22
     9ba:	17 06       	cpc	r1, r23
     9bc:	18 06       	cpc	r1, r24
     9be:	99 1f       	adc	r25, r25
     9c0:	f1 cf       	rjmp	.-30     	; 0x9a4 <__fp_splitA+0xc>
     9c2:	86 95       	lsr	r24
     9c4:	71 05       	cpc	r23, r1
     9c6:	61 05       	cpc	r22, r1
     9c8:	08 94       	sec
     9ca:	08 95       	ret

000009cc <__fp_zero>:
     9cc:	e8 94       	clt

000009ce <__fp_szero>:
     9ce:	bb 27       	eor	r27, r27
     9d0:	66 27       	eor	r22, r22
     9d2:	77 27       	eor	r23, r23
     9d4:	cb 01       	movw	r24, r22
     9d6:	97 f9       	bld	r25, 7
     9d8:	08 95       	ret

000009da <__mulsf3>:
     9da:	0e 94 00 05 	call	0xa00	; 0xa00 <__mulsf3x>
     9de:	0c 94 b3 04 	jmp	0x966	; 0x966 <__fp_round>
     9e2:	0e 94 a5 04 	call	0x94a	; 0x94a <__fp_pscA>
     9e6:	38 f0       	brcs	.+14     	; 0x9f6 <__mulsf3+0x1c>
     9e8:	0e 94 ac 04 	call	0x958	; 0x958 <__fp_pscB>
     9ec:	20 f0       	brcs	.+8      	; 0x9f6 <__mulsf3+0x1c>
     9ee:	95 23       	and	r25, r21
     9f0:	11 f0       	breq	.+4      	; 0x9f6 <__mulsf3+0x1c>
     9f2:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
     9f6:	0c 94 a2 04 	jmp	0x944	; 0x944 <__fp_nan>
     9fa:	11 24       	eor	r1, r1
     9fc:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>

00000a00 <__mulsf3x>:
     a00:	0e 94 c4 04 	call	0x988	; 0x988 <__fp_split3>
     a04:	70 f3       	brcs	.-36     	; 0x9e2 <__mulsf3+0x8>

00000a06 <__mulsf3_pse>:
     a06:	95 9f       	mul	r25, r21
     a08:	c1 f3       	breq	.-16     	; 0x9fa <__mulsf3+0x20>
     a0a:	95 0f       	add	r25, r21
     a0c:	50 e0       	ldi	r21, 0x00	; 0
     a0e:	55 1f       	adc	r21, r21
     a10:	62 9f       	mul	r22, r18
     a12:	f0 01       	movw	r30, r0
     a14:	72 9f       	mul	r23, r18
     a16:	bb 27       	eor	r27, r27
     a18:	f0 0d       	add	r31, r0
     a1a:	b1 1d       	adc	r27, r1
     a1c:	63 9f       	mul	r22, r19
     a1e:	aa 27       	eor	r26, r26
     a20:	f0 0d       	add	r31, r0
     a22:	b1 1d       	adc	r27, r1
     a24:	aa 1f       	adc	r26, r26
     a26:	64 9f       	mul	r22, r20
     a28:	66 27       	eor	r22, r22
     a2a:	b0 0d       	add	r27, r0
     a2c:	a1 1d       	adc	r26, r1
     a2e:	66 1f       	adc	r22, r22
     a30:	82 9f       	mul	r24, r18
     a32:	22 27       	eor	r18, r18
     a34:	b0 0d       	add	r27, r0
     a36:	a1 1d       	adc	r26, r1
     a38:	62 1f       	adc	r22, r18
     a3a:	73 9f       	mul	r23, r19
     a3c:	b0 0d       	add	r27, r0
     a3e:	a1 1d       	adc	r26, r1
     a40:	62 1f       	adc	r22, r18
     a42:	83 9f       	mul	r24, r19
     a44:	a0 0d       	add	r26, r0
     a46:	61 1d       	adc	r22, r1
     a48:	22 1f       	adc	r18, r18
     a4a:	74 9f       	mul	r23, r20
     a4c:	33 27       	eor	r19, r19
     a4e:	a0 0d       	add	r26, r0
     a50:	61 1d       	adc	r22, r1
     a52:	23 1f       	adc	r18, r19
     a54:	84 9f       	mul	r24, r20
     a56:	60 0d       	add	r22, r0
     a58:	21 1d       	adc	r18, r1
     a5a:	82 2f       	mov	r24, r18
     a5c:	76 2f       	mov	r23, r22
     a5e:	6a 2f       	mov	r22, r26
     a60:	11 24       	eor	r1, r1
     a62:	9f 57       	subi	r25, 0x7F	; 127
     a64:	50 40       	sbci	r21, 0x00	; 0
     a66:	9a f0       	brmi	.+38     	; 0xa8e <__mulsf3_pse+0x88>
     a68:	f1 f0       	breq	.+60     	; 0xaa6 <__mulsf3_pse+0xa0>
     a6a:	88 23       	and	r24, r24
     a6c:	4a f0       	brmi	.+18     	; 0xa80 <__mulsf3_pse+0x7a>
     a6e:	ee 0f       	add	r30, r30
     a70:	ff 1f       	adc	r31, r31
     a72:	bb 1f       	adc	r27, r27
     a74:	66 1f       	adc	r22, r22
     a76:	77 1f       	adc	r23, r23
     a78:	88 1f       	adc	r24, r24
     a7a:	91 50       	subi	r25, 0x01	; 1
     a7c:	50 40       	sbci	r21, 0x00	; 0
     a7e:	a9 f7       	brne	.-22     	; 0xa6a <__mulsf3_pse+0x64>
     a80:	9e 3f       	cpi	r25, 0xFE	; 254
     a82:	51 05       	cpc	r21, r1
     a84:	80 f0       	brcs	.+32     	; 0xaa6 <__mulsf3_pse+0xa0>
     a86:	0c 94 9c 04 	jmp	0x938	; 0x938 <__fp_inf>
     a8a:	0c 94 e7 04 	jmp	0x9ce	; 0x9ce <__fp_szero>
     a8e:	5f 3f       	cpi	r21, 0xFF	; 255
     a90:	e4 f3       	brlt	.-8      	; 0xa8a <__mulsf3_pse+0x84>
     a92:	98 3e       	cpi	r25, 0xE8	; 232
     a94:	d4 f3       	brlt	.-12     	; 0xa8a <__mulsf3_pse+0x84>
     a96:	86 95       	lsr	r24
     a98:	77 95       	ror	r23
     a9a:	67 95       	ror	r22
     a9c:	b7 95       	ror	r27
     a9e:	f7 95       	ror	r31
     aa0:	e7 95       	ror	r30
     aa2:	9f 5f       	subi	r25, 0xFF	; 255
     aa4:	c1 f7       	brne	.-16     	; 0xa96 <__mulsf3_pse+0x90>
     aa6:	fe 2b       	or	r31, r30
     aa8:	88 0f       	add	r24, r24
     aaa:	91 1d       	adc	r25, r1
     aac:	96 95       	lsr	r25
     aae:	87 95       	ror	r24
     ab0:	97 f9       	bld	r25, 7
     ab2:	08 95       	ret

00000ab4 <snprintf>:
     ab4:	ae e0       	ldi	r26, 0x0E	; 14
     ab6:	b0 e0       	ldi	r27, 0x00	; 0
     ab8:	e0 e6       	ldi	r30, 0x60	; 96
     aba:	f5 e0       	ldi	r31, 0x05	; 5
     abc:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__prologue_saves__+0x1c>
     ac0:	0d 89       	ldd	r16, Y+21	; 0x15
     ac2:	1e 89       	ldd	r17, Y+22	; 0x16
     ac4:	8f 89       	ldd	r24, Y+23	; 0x17
     ac6:	98 8d       	ldd	r25, Y+24	; 0x18
     ac8:	26 e0       	ldi	r18, 0x06	; 6
     aca:	2c 83       	std	Y+4, r18	; 0x04
     acc:	1a 83       	std	Y+2, r17	; 0x02
     ace:	09 83       	std	Y+1, r16	; 0x01
     ad0:	97 ff       	sbrs	r25, 7
     ad2:	02 c0       	rjmp	.+4      	; 0xad8 <snprintf+0x24>
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e8       	ldi	r25, 0x80	; 128
     ad8:	01 97       	sbiw	r24, 0x01	; 1
     ada:	9e 83       	std	Y+6, r25	; 0x06
     adc:	8d 83       	std	Y+5, r24	; 0x05
     ade:	ae 01       	movw	r20, r28
     ae0:	45 5e       	subi	r20, 0xE5	; 229
     ae2:	5f 4f       	sbci	r21, 0xFF	; 255
     ae4:	69 8d       	ldd	r22, Y+25	; 0x19
     ae6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ae8:	ce 01       	movw	r24, r28
     aea:	01 96       	adiw	r24, 0x01	; 1
     aec:	0e 94 ac 05 	call	0xb58	; 0xb58 <vfprintf>
     af0:	4d 81       	ldd	r20, Y+5	; 0x05
     af2:	5e 81       	ldd	r21, Y+6	; 0x06
     af4:	57 fd       	sbrc	r21, 7
     af6:	0a c0       	rjmp	.+20     	; 0xb0c <snprintf+0x58>
     af8:	2f 81       	ldd	r18, Y+7	; 0x07
     afa:	38 85       	ldd	r19, Y+8	; 0x08
     afc:	42 17       	cp	r20, r18
     afe:	53 07       	cpc	r21, r19
     b00:	0c f4       	brge	.+2      	; 0xb04 <snprintf+0x50>
     b02:	9a 01       	movw	r18, r20
     b04:	f8 01       	movw	r30, r16
     b06:	e2 0f       	add	r30, r18
     b08:	f3 1f       	adc	r31, r19
     b0a:	10 82       	st	Z, r1
     b0c:	2e 96       	adiw	r28, 0x0e	; 14
     b0e:	e4 e0       	ldi	r30, 0x04	; 4
     b10:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__epilogue_restores__+0x1c>

00000b14 <sprintf>:
     b14:	ae e0       	ldi	r26, 0x0E	; 14
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	e0 e9       	ldi	r30, 0x90	; 144
     b1a:	f5 e0       	ldi	r31, 0x05	; 5
     b1c:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__prologue_saves__+0x1c>
     b20:	0d 89       	ldd	r16, Y+21	; 0x15
     b22:	1e 89       	ldd	r17, Y+22	; 0x16
     b24:	86 e0       	ldi	r24, 0x06	; 6
     b26:	8c 83       	std	Y+4, r24	; 0x04
     b28:	1a 83       	std	Y+2, r17	; 0x02
     b2a:	09 83       	std	Y+1, r16	; 0x01
     b2c:	8f ef       	ldi	r24, 0xFF	; 255
     b2e:	9f e7       	ldi	r25, 0x7F	; 127
     b30:	9e 83       	std	Y+6, r25	; 0x06
     b32:	8d 83       	std	Y+5, r24	; 0x05
     b34:	ae 01       	movw	r20, r28
     b36:	47 5e       	subi	r20, 0xE7	; 231
     b38:	5f 4f       	sbci	r21, 0xFF	; 255
     b3a:	6f 89       	ldd	r22, Y+23	; 0x17
     b3c:	78 8d       	ldd	r23, Y+24	; 0x18
     b3e:	ce 01       	movw	r24, r28
     b40:	01 96       	adiw	r24, 0x01	; 1
     b42:	0e 94 ac 05 	call	0xb58	; 0xb58 <vfprintf>
     b46:	ef 81       	ldd	r30, Y+7	; 0x07
     b48:	f8 85       	ldd	r31, Y+8	; 0x08
     b4a:	e0 0f       	add	r30, r16
     b4c:	f1 1f       	adc	r31, r17
     b4e:	10 82       	st	Z, r1
     b50:	2e 96       	adiw	r28, 0x0e	; 14
     b52:	e4 e0       	ldi	r30, 0x04	; 4
     b54:	0c 94 67 08 	jmp	0x10ce	; 0x10ce <__epilogue_restores__+0x1c>

00000b58 <vfprintf>:
     b58:	ab e0       	ldi	r26, 0x0B	; 11
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e2 eb       	ldi	r30, 0xB2	; 178
     b5e:	f5 e0       	ldi	r31, 0x05	; 5
     b60:	0c 94 3d 08 	jmp	0x107a	; 0x107a <__prologue_saves__>
     b64:	6c 01       	movw	r12, r24
     b66:	7b 01       	movw	r14, r22
     b68:	8a 01       	movw	r16, r20
     b6a:	fc 01       	movw	r30, r24
     b6c:	17 82       	std	Z+7, r1	; 0x07
     b6e:	16 82       	std	Z+6, r1	; 0x06
     b70:	83 81       	ldd	r24, Z+3	; 0x03
     b72:	81 ff       	sbrs	r24, 1
     b74:	cc c1       	rjmp	.+920    	; 0xf0e <vfprintf+0x3b6>
     b76:	ce 01       	movw	r24, r28
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	3c 01       	movw	r6, r24
     b7c:	f6 01       	movw	r30, r12
     b7e:	93 81       	ldd	r25, Z+3	; 0x03
     b80:	f7 01       	movw	r30, r14
     b82:	93 fd       	sbrc	r25, 3
     b84:	85 91       	lpm	r24, Z+
     b86:	93 ff       	sbrs	r25, 3
     b88:	81 91       	ld	r24, Z+
     b8a:	7f 01       	movw	r14, r30
     b8c:	88 23       	and	r24, r24
     b8e:	09 f4       	brne	.+2      	; 0xb92 <vfprintf+0x3a>
     b90:	ba c1       	rjmp	.+884    	; 0xf06 <vfprintf+0x3ae>
     b92:	85 32       	cpi	r24, 0x25	; 37
     b94:	39 f4       	brne	.+14     	; 0xba4 <vfprintf+0x4c>
     b96:	93 fd       	sbrc	r25, 3
     b98:	85 91       	lpm	r24, Z+
     b9a:	93 ff       	sbrs	r25, 3
     b9c:	81 91       	ld	r24, Z+
     b9e:	7f 01       	movw	r14, r30
     ba0:	85 32       	cpi	r24, 0x25	; 37
     ba2:	29 f4       	brne	.+10     	; 0xbae <vfprintf+0x56>
     ba4:	b6 01       	movw	r22, r12
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     bac:	e7 cf       	rjmp	.-50     	; 0xb7c <vfprintf+0x24>
     bae:	91 2c       	mov	r9, r1
     bb0:	21 2c       	mov	r2, r1
     bb2:	31 2c       	mov	r3, r1
     bb4:	ff e1       	ldi	r31, 0x1F	; 31
     bb6:	f3 15       	cp	r31, r3
     bb8:	d8 f0       	brcs	.+54     	; 0xbf0 <vfprintf+0x98>
     bba:	8b 32       	cpi	r24, 0x2B	; 43
     bbc:	79 f0       	breq	.+30     	; 0xbdc <vfprintf+0x84>
     bbe:	38 f4       	brcc	.+14     	; 0xbce <vfprintf+0x76>
     bc0:	80 32       	cpi	r24, 0x20	; 32
     bc2:	79 f0       	breq	.+30     	; 0xbe2 <vfprintf+0x8a>
     bc4:	83 32       	cpi	r24, 0x23	; 35
     bc6:	a1 f4       	brne	.+40     	; 0xbf0 <vfprintf+0x98>
     bc8:	23 2d       	mov	r18, r3
     bca:	20 61       	ori	r18, 0x10	; 16
     bcc:	1d c0       	rjmp	.+58     	; 0xc08 <vfprintf+0xb0>
     bce:	8d 32       	cpi	r24, 0x2D	; 45
     bd0:	61 f0       	breq	.+24     	; 0xbea <vfprintf+0x92>
     bd2:	80 33       	cpi	r24, 0x30	; 48
     bd4:	69 f4       	brne	.+26     	; 0xbf0 <vfprintf+0x98>
     bd6:	23 2d       	mov	r18, r3
     bd8:	21 60       	ori	r18, 0x01	; 1
     bda:	16 c0       	rjmp	.+44     	; 0xc08 <vfprintf+0xb0>
     bdc:	83 2d       	mov	r24, r3
     bde:	82 60       	ori	r24, 0x02	; 2
     be0:	38 2e       	mov	r3, r24
     be2:	e3 2d       	mov	r30, r3
     be4:	e4 60       	ori	r30, 0x04	; 4
     be6:	3e 2e       	mov	r3, r30
     be8:	2a c0       	rjmp	.+84     	; 0xc3e <vfprintf+0xe6>
     bea:	f3 2d       	mov	r31, r3
     bec:	f8 60       	ori	r31, 0x08	; 8
     bee:	1d c0       	rjmp	.+58     	; 0xc2a <vfprintf+0xd2>
     bf0:	37 fc       	sbrc	r3, 7
     bf2:	2d c0       	rjmp	.+90     	; 0xc4e <vfprintf+0xf6>
     bf4:	20 ed       	ldi	r18, 0xD0	; 208
     bf6:	28 0f       	add	r18, r24
     bf8:	2a 30       	cpi	r18, 0x0A	; 10
     bfa:	40 f0       	brcs	.+16     	; 0xc0c <vfprintf+0xb4>
     bfc:	8e 32       	cpi	r24, 0x2E	; 46
     bfe:	b9 f4       	brne	.+46     	; 0xc2e <vfprintf+0xd6>
     c00:	36 fc       	sbrc	r3, 6
     c02:	81 c1       	rjmp	.+770    	; 0xf06 <vfprintf+0x3ae>
     c04:	23 2d       	mov	r18, r3
     c06:	20 64       	ori	r18, 0x40	; 64
     c08:	32 2e       	mov	r3, r18
     c0a:	19 c0       	rjmp	.+50     	; 0xc3e <vfprintf+0xe6>
     c0c:	36 fe       	sbrs	r3, 6
     c0e:	06 c0       	rjmp	.+12     	; 0xc1c <vfprintf+0xc4>
     c10:	8a e0       	ldi	r24, 0x0A	; 10
     c12:	98 9e       	mul	r9, r24
     c14:	20 0d       	add	r18, r0
     c16:	11 24       	eor	r1, r1
     c18:	92 2e       	mov	r9, r18
     c1a:	11 c0       	rjmp	.+34     	; 0xc3e <vfprintf+0xe6>
     c1c:	ea e0       	ldi	r30, 0x0A	; 10
     c1e:	2e 9e       	mul	r2, r30
     c20:	20 0d       	add	r18, r0
     c22:	11 24       	eor	r1, r1
     c24:	22 2e       	mov	r2, r18
     c26:	f3 2d       	mov	r31, r3
     c28:	f0 62       	ori	r31, 0x20	; 32
     c2a:	3f 2e       	mov	r3, r31
     c2c:	08 c0       	rjmp	.+16     	; 0xc3e <vfprintf+0xe6>
     c2e:	8c 36       	cpi	r24, 0x6C	; 108
     c30:	21 f4       	brne	.+8      	; 0xc3a <vfprintf+0xe2>
     c32:	83 2d       	mov	r24, r3
     c34:	80 68       	ori	r24, 0x80	; 128
     c36:	38 2e       	mov	r3, r24
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <vfprintf+0xe6>
     c3a:	88 36       	cpi	r24, 0x68	; 104
     c3c:	41 f4       	brne	.+16     	; 0xc4e <vfprintf+0xf6>
     c3e:	f7 01       	movw	r30, r14
     c40:	93 fd       	sbrc	r25, 3
     c42:	85 91       	lpm	r24, Z+
     c44:	93 ff       	sbrs	r25, 3
     c46:	81 91       	ld	r24, Z+
     c48:	7f 01       	movw	r14, r30
     c4a:	81 11       	cpse	r24, r1
     c4c:	b3 cf       	rjmp	.-154    	; 0xbb4 <vfprintf+0x5c>
     c4e:	98 2f       	mov	r25, r24
     c50:	9f 7d       	andi	r25, 0xDF	; 223
     c52:	95 54       	subi	r25, 0x45	; 69
     c54:	93 30       	cpi	r25, 0x03	; 3
     c56:	28 f4       	brcc	.+10     	; 0xc62 <vfprintf+0x10a>
     c58:	0c 5f       	subi	r16, 0xFC	; 252
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	9f e3       	ldi	r25, 0x3F	; 63
     c5e:	99 83       	std	Y+1, r25	; 0x01
     c60:	0d c0       	rjmp	.+26     	; 0xc7c <vfprintf+0x124>
     c62:	83 36       	cpi	r24, 0x63	; 99
     c64:	31 f0       	breq	.+12     	; 0xc72 <vfprintf+0x11a>
     c66:	83 37       	cpi	r24, 0x73	; 115
     c68:	71 f0       	breq	.+28     	; 0xc86 <vfprintf+0x12e>
     c6a:	83 35       	cpi	r24, 0x53	; 83
     c6c:	09 f0       	breq	.+2      	; 0xc70 <vfprintf+0x118>
     c6e:	59 c0       	rjmp	.+178    	; 0xd22 <vfprintf+0x1ca>
     c70:	21 c0       	rjmp	.+66     	; 0xcb4 <vfprintf+0x15c>
     c72:	f8 01       	movw	r30, r16
     c74:	80 81       	ld	r24, Z
     c76:	89 83       	std	Y+1, r24	; 0x01
     c78:	0e 5f       	subi	r16, 0xFE	; 254
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	88 24       	eor	r8, r8
     c7e:	83 94       	inc	r8
     c80:	91 2c       	mov	r9, r1
     c82:	53 01       	movw	r10, r6
     c84:	13 c0       	rjmp	.+38     	; 0xcac <vfprintf+0x154>
     c86:	28 01       	movw	r4, r16
     c88:	f2 e0       	ldi	r31, 0x02	; 2
     c8a:	4f 0e       	add	r4, r31
     c8c:	51 1c       	adc	r5, r1
     c8e:	f8 01       	movw	r30, r16
     c90:	a0 80       	ld	r10, Z
     c92:	b1 80       	ldd	r11, Z+1	; 0x01
     c94:	36 fe       	sbrs	r3, 6
     c96:	03 c0       	rjmp	.+6      	; 0xc9e <vfprintf+0x146>
     c98:	69 2d       	mov	r22, r9
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <vfprintf+0x14a>
     c9e:	6f ef       	ldi	r22, 0xFF	; 255
     ca0:	7f ef       	ldi	r23, 0xFF	; 255
     ca2:	c5 01       	movw	r24, r10
     ca4:	0e 94 98 07 	call	0xf30	; 0xf30 <strnlen>
     ca8:	4c 01       	movw	r8, r24
     caa:	82 01       	movw	r16, r4
     cac:	f3 2d       	mov	r31, r3
     cae:	ff 77       	andi	r31, 0x7F	; 127
     cb0:	3f 2e       	mov	r3, r31
     cb2:	16 c0       	rjmp	.+44     	; 0xce0 <vfprintf+0x188>
     cb4:	28 01       	movw	r4, r16
     cb6:	22 e0       	ldi	r18, 0x02	; 2
     cb8:	42 0e       	add	r4, r18
     cba:	51 1c       	adc	r5, r1
     cbc:	f8 01       	movw	r30, r16
     cbe:	a0 80       	ld	r10, Z
     cc0:	b1 80       	ldd	r11, Z+1	; 0x01
     cc2:	36 fe       	sbrs	r3, 6
     cc4:	03 c0       	rjmp	.+6      	; 0xccc <vfprintf+0x174>
     cc6:	69 2d       	mov	r22, r9
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	02 c0       	rjmp	.+4      	; 0xcd0 <vfprintf+0x178>
     ccc:	6f ef       	ldi	r22, 0xFF	; 255
     cce:	7f ef       	ldi	r23, 0xFF	; 255
     cd0:	c5 01       	movw	r24, r10
     cd2:	0e 94 8d 07 	call	0xf1a	; 0xf1a <strnlen_P>
     cd6:	4c 01       	movw	r8, r24
     cd8:	f3 2d       	mov	r31, r3
     cda:	f0 68       	ori	r31, 0x80	; 128
     cdc:	3f 2e       	mov	r3, r31
     cde:	82 01       	movw	r16, r4
     ce0:	33 fc       	sbrc	r3, 3
     ce2:	1b c0       	rjmp	.+54     	; 0xd1a <vfprintf+0x1c2>
     ce4:	82 2d       	mov	r24, r2
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	88 16       	cp	r8, r24
     cea:	99 06       	cpc	r9, r25
     cec:	b0 f4       	brcc	.+44     	; 0xd1a <vfprintf+0x1c2>
     cee:	b6 01       	movw	r22, r12
     cf0:	80 e2       	ldi	r24, 0x20	; 32
     cf2:	90 e0       	ldi	r25, 0x00	; 0
     cf4:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     cf8:	2a 94       	dec	r2
     cfa:	f4 cf       	rjmp	.-24     	; 0xce4 <vfprintf+0x18c>
     cfc:	f5 01       	movw	r30, r10
     cfe:	37 fc       	sbrc	r3, 7
     d00:	85 91       	lpm	r24, Z+
     d02:	37 fe       	sbrs	r3, 7
     d04:	81 91       	ld	r24, Z+
     d06:	5f 01       	movw	r10, r30
     d08:	b6 01       	movw	r22, r12
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     d10:	21 10       	cpse	r2, r1
     d12:	2a 94       	dec	r2
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	82 1a       	sub	r8, r18
     d18:	91 08       	sbc	r9, r1
     d1a:	81 14       	cp	r8, r1
     d1c:	91 04       	cpc	r9, r1
     d1e:	71 f7       	brne	.-36     	; 0xcfc <vfprintf+0x1a4>
     d20:	e8 c0       	rjmp	.+464    	; 0xef2 <vfprintf+0x39a>
     d22:	84 36       	cpi	r24, 0x64	; 100
     d24:	11 f0       	breq	.+4      	; 0xd2a <vfprintf+0x1d2>
     d26:	89 36       	cpi	r24, 0x69	; 105
     d28:	41 f5       	brne	.+80     	; 0xd7a <vfprintf+0x222>
     d2a:	f8 01       	movw	r30, r16
     d2c:	37 fe       	sbrs	r3, 7
     d2e:	07 c0       	rjmp	.+14     	; 0xd3e <vfprintf+0x1e6>
     d30:	60 81       	ld	r22, Z
     d32:	71 81       	ldd	r23, Z+1	; 0x01
     d34:	82 81       	ldd	r24, Z+2	; 0x02
     d36:	93 81       	ldd	r25, Z+3	; 0x03
     d38:	0c 5f       	subi	r16, 0xFC	; 252
     d3a:	1f 4f       	sbci	r17, 0xFF	; 255
     d3c:	08 c0       	rjmp	.+16     	; 0xd4e <vfprintf+0x1f6>
     d3e:	60 81       	ld	r22, Z
     d40:	71 81       	ldd	r23, Z+1	; 0x01
     d42:	07 2e       	mov	r0, r23
     d44:	00 0c       	add	r0, r0
     d46:	88 0b       	sbc	r24, r24
     d48:	99 0b       	sbc	r25, r25
     d4a:	0e 5f       	subi	r16, 0xFE	; 254
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	f3 2d       	mov	r31, r3
     d50:	ff 76       	andi	r31, 0x6F	; 111
     d52:	3f 2e       	mov	r3, r31
     d54:	97 ff       	sbrs	r25, 7
     d56:	09 c0       	rjmp	.+18     	; 0xd6a <vfprintf+0x212>
     d58:	90 95       	com	r25
     d5a:	80 95       	com	r24
     d5c:	70 95       	com	r23
     d5e:	61 95       	neg	r22
     d60:	7f 4f       	sbci	r23, 0xFF	; 255
     d62:	8f 4f       	sbci	r24, 0xFF	; 255
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	f0 68       	ori	r31, 0x80	; 128
     d68:	3f 2e       	mov	r3, r31
     d6a:	2a e0       	ldi	r18, 0x0A	; 10
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	a3 01       	movw	r20, r6
     d70:	0e 94 df 07 	call	0xfbe	; 0xfbe <__ultoa_invert>
     d74:	88 2e       	mov	r8, r24
     d76:	86 18       	sub	r8, r6
     d78:	45 c0       	rjmp	.+138    	; 0xe04 <vfprintf+0x2ac>
     d7a:	85 37       	cpi	r24, 0x75	; 117
     d7c:	31 f4       	brne	.+12     	; 0xd8a <vfprintf+0x232>
     d7e:	23 2d       	mov	r18, r3
     d80:	2f 7e       	andi	r18, 0xEF	; 239
     d82:	b2 2e       	mov	r11, r18
     d84:	2a e0       	ldi	r18, 0x0A	; 10
     d86:	30 e0       	ldi	r19, 0x00	; 0
     d88:	25 c0       	rjmp	.+74     	; 0xdd4 <vfprintf+0x27c>
     d8a:	93 2d       	mov	r25, r3
     d8c:	99 7f       	andi	r25, 0xF9	; 249
     d8e:	b9 2e       	mov	r11, r25
     d90:	8f 36       	cpi	r24, 0x6F	; 111
     d92:	c1 f0       	breq	.+48     	; 0xdc4 <vfprintf+0x26c>
     d94:	18 f4       	brcc	.+6      	; 0xd9c <vfprintf+0x244>
     d96:	88 35       	cpi	r24, 0x58	; 88
     d98:	79 f0       	breq	.+30     	; 0xdb8 <vfprintf+0x260>
     d9a:	b5 c0       	rjmp	.+362    	; 0xf06 <vfprintf+0x3ae>
     d9c:	80 37       	cpi	r24, 0x70	; 112
     d9e:	19 f0       	breq	.+6      	; 0xda6 <vfprintf+0x24e>
     da0:	88 37       	cpi	r24, 0x78	; 120
     da2:	21 f0       	breq	.+8      	; 0xdac <vfprintf+0x254>
     da4:	b0 c0       	rjmp	.+352    	; 0xf06 <vfprintf+0x3ae>
     da6:	e9 2f       	mov	r30, r25
     da8:	e0 61       	ori	r30, 0x10	; 16
     daa:	be 2e       	mov	r11, r30
     dac:	b4 fe       	sbrs	r11, 4
     dae:	0d c0       	rjmp	.+26     	; 0xdca <vfprintf+0x272>
     db0:	fb 2d       	mov	r31, r11
     db2:	f4 60       	ori	r31, 0x04	; 4
     db4:	bf 2e       	mov	r11, r31
     db6:	09 c0       	rjmp	.+18     	; 0xdca <vfprintf+0x272>
     db8:	34 fe       	sbrs	r3, 4
     dba:	0a c0       	rjmp	.+20     	; 0xdd0 <vfprintf+0x278>
     dbc:	29 2f       	mov	r18, r25
     dbe:	26 60       	ori	r18, 0x06	; 6
     dc0:	b2 2e       	mov	r11, r18
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0x278>
     dc4:	28 e0       	ldi	r18, 0x08	; 8
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	05 c0       	rjmp	.+10     	; 0xdd4 <vfprintf+0x27c>
     dca:	20 e1       	ldi	r18, 0x10	; 16
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	02 c0       	rjmp	.+4      	; 0xdd4 <vfprintf+0x27c>
     dd0:	20 e1       	ldi	r18, 0x10	; 16
     dd2:	32 e0       	ldi	r19, 0x02	; 2
     dd4:	f8 01       	movw	r30, r16
     dd6:	b7 fe       	sbrs	r11, 7
     dd8:	07 c0       	rjmp	.+14     	; 0xde8 <vfprintf+0x290>
     dda:	60 81       	ld	r22, Z
     ddc:	71 81       	ldd	r23, Z+1	; 0x01
     dde:	82 81       	ldd	r24, Z+2	; 0x02
     de0:	93 81       	ldd	r25, Z+3	; 0x03
     de2:	0c 5f       	subi	r16, 0xFC	; 252
     de4:	1f 4f       	sbci	r17, 0xFF	; 255
     de6:	06 c0       	rjmp	.+12     	; 0xdf4 <vfprintf+0x29c>
     de8:	60 81       	ld	r22, Z
     dea:	71 81       	ldd	r23, Z+1	; 0x01
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 5f       	subi	r16, 0xFE	; 254
     df2:	1f 4f       	sbci	r17, 0xFF	; 255
     df4:	a3 01       	movw	r20, r6
     df6:	0e 94 df 07 	call	0xfbe	; 0xfbe <__ultoa_invert>
     dfa:	88 2e       	mov	r8, r24
     dfc:	86 18       	sub	r8, r6
     dfe:	fb 2d       	mov	r31, r11
     e00:	ff 77       	andi	r31, 0x7F	; 127
     e02:	3f 2e       	mov	r3, r31
     e04:	36 fe       	sbrs	r3, 6
     e06:	0d c0       	rjmp	.+26     	; 0xe22 <vfprintf+0x2ca>
     e08:	23 2d       	mov	r18, r3
     e0a:	2e 7f       	andi	r18, 0xFE	; 254
     e0c:	a2 2e       	mov	r10, r18
     e0e:	89 14       	cp	r8, r9
     e10:	58 f4       	brcc	.+22     	; 0xe28 <vfprintf+0x2d0>
     e12:	34 fe       	sbrs	r3, 4
     e14:	0b c0       	rjmp	.+22     	; 0xe2c <vfprintf+0x2d4>
     e16:	32 fc       	sbrc	r3, 2
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <vfprintf+0x2d4>
     e1a:	83 2d       	mov	r24, r3
     e1c:	8e 7e       	andi	r24, 0xEE	; 238
     e1e:	a8 2e       	mov	r10, r24
     e20:	05 c0       	rjmp	.+10     	; 0xe2c <vfprintf+0x2d4>
     e22:	b8 2c       	mov	r11, r8
     e24:	a3 2c       	mov	r10, r3
     e26:	03 c0       	rjmp	.+6      	; 0xe2e <vfprintf+0x2d6>
     e28:	b8 2c       	mov	r11, r8
     e2a:	01 c0       	rjmp	.+2      	; 0xe2e <vfprintf+0x2d6>
     e2c:	b9 2c       	mov	r11, r9
     e2e:	a4 fe       	sbrs	r10, 4
     e30:	0f c0       	rjmp	.+30     	; 0xe50 <vfprintf+0x2f8>
     e32:	fe 01       	movw	r30, r28
     e34:	e8 0d       	add	r30, r8
     e36:	f1 1d       	adc	r31, r1
     e38:	80 81       	ld	r24, Z
     e3a:	80 33       	cpi	r24, 0x30	; 48
     e3c:	21 f4       	brne	.+8      	; 0xe46 <vfprintf+0x2ee>
     e3e:	9a 2d       	mov	r25, r10
     e40:	99 7e       	andi	r25, 0xE9	; 233
     e42:	a9 2e       	mov	r10, r25
     e44:	09 c0       	rjmp	.+18     	; 0xe58 <vfprintf+0x300>
     e46:	a2 fe       	sbrs	r10, 2
     e48:	06 c0       	rjmp	.+12     	; 0xe56 <vfprintf+0x2fe>
     e4a:	b3 94       	inc	r11
     e4c:	b3 94       	inc	r11
     e4e:	04 c0       	rjmp	.+8      	; 0xe58 <vfprintf+0x300>
     e50:	8a 2d       	mov	r24, r10
     e52:	86 78       	andi	r24, 0x86	; 134
     e54:	09 f0       	breq	.+2      	; 0xe58 <vfprintf+0x300>
     e56:	b3 94       	inc	r11
     e58:	a3 fc       	sbrc	r10, 3
     e5a:	11 c0       	rjmp	.+34     	; 0xe7e <vfprintf+0x326>
     e5c:	a0 fe       	sbrs	r10, 0
     e5e:	06 c0       	rjmp	.+12     	; 0xe6c <vfprintf+0x314>
     e60:	b2 14       	cp	r11, r2
     e62:	88 f4       	brcc	.+34     	; 0xe86 <vfprintf+0x32e>
     e64:	28 0c       	add	r2, r8
     e66:	92 2c       	mov	r9, r2
     e68:	9b 18       	sub	r9, r11
     e6a:	0e c0       	rjmp	.+28     	; 0xe88 <vfprintf+0x330>
     e6c:	b2 14       	cp	r11, r2
     e6e:	60 f4       	brcc	.+24     	; 0xe88 <vfprintf+0x330>
     e70:	b6 01       	movw	r22, r12
     e72:	80 e2       	ldi	r24, 0x20	; 32
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     e7a:	b3 94       	inc	r11
     e7c:	f7 cf       	rjmp	.-18     	; 0xe6c <vfprintf+0x314>
     e7e:	b2 14       	cp	r11, r2
     e80:	18 f4       	brcc	.+6      	; 0xe88 <vfprintf+0x330>
     e82:	2b 18       	sub	r2, r11
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <vfprintf+0x332>
     e86:	98 2c       	mov	r9, r8
     e88:	21 2c       	mov	r2, r1
     e8a:	a4 fe       	sbrs	r10, 4
     e8c:	10 c0       	rjmp	.+32     	; 0xeae <vfprintf+0x356>
     e8e:	b6 01       	movw	r22, r12
     e90:	80 e3       	ldi	r24, 0x30	; 48
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     e98:	a2 fe       	sbrs	r10, 2
     e9a:	17 c0       	rjmp	.+46     	; 0xeca <vfprintf+0x372>
     e9c:	a1 fc       	sbrc	r10, 1
     e9e:	03 c0       	rjmp	.+6      	; 0xea6 <vfprintf+0x34e>
     ea0:	88 e7       	ldi	r24, 0x78	; 120
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 c0       	rjmp	.+4      	; 0xeaa <vfprintf+0x352>
     ea6:	88 e5       	ldi	r24, 0x58	; 88
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	b6 01       	movw	r22, r12
     eac:	0c c0       	rjmp	.+24     	; 0xec6 <vfprintf+0x36e>
     eae:	8a 2d       	mov	r24, r10
     eb0:	86 78       	andi	r24, 0x86	; 134
     eb2:	59 f0       	breq	.+22     	; 0xeca <vfprintf+0x372>
     eb4:	a1 fe       	sbrs	r10, 1
     eb6:	02 c0       	rjmp	.+4      	; 0xebc <vfprintf+0x364>
     eb8:	8b e2       	ldi	r24, 0x2B	; 43
     eba:	01 c0       	rjmp	.+2      	; 0xebe <vfprintf+0x366>
     ebc:	80 e2       	ldi	r24, 0x20	; 32
     ebe:	a7 fc       	sbrc	r10, 7
     ec0:	8d e2       	ldi	r24, 0x2D	; 45
     ec2:	b6 01       	movw	r22, r12
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     eca:	89 14       	cp	r8, r9
     ecc:	38 f4       	brcc	.+14     	; 0xedc <vfprintf+0x384>
     ece:	b6 01       	movw	r22, r12
     ed0:	80 e3       	ldi	r24, 0x30	; 48
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     ed8:	9a 94       	dec	r9
     eda:	f7 cf       	rjmp	.-18     	; 0xeca <vfprintf+0x372>
     edc:	8a 94       	dec	r8
     ede:	f3 01       	movw	r30, r6
     ee0:	e8 0d       	add	r30, r8
     ee2:	f1 1d       	adc	r31, r1
     ee4:	80 81       	ld	r24, Z
     ee6:	b6 01       	movw	r22, r12
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     eee:	81 10       	cpse	r8, r1
     ef0:	f5 cf       	rjmp	.-22     	; 0xedc <vfprintf+0x384>
     ef2:	22 20       	and	r2, r2
     ef4:	09 f4       	brne	.+2      	; 0xef8 <vfprintf+0x3a0>
     ef6:	42 ce       	rjmp	.-892    	; 0xb7c <vfprintf+0x24>
     ef8:	b6 01       	movw	r22, r12
     efa:	80 e2       	ldi	r24, 0x20	; 32
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	0e 94 a3 07 	call	0xf46	; 0xf46 <fputc>
     f02:	2a 94       	dec	r2
     f04:	f6 cf       	rjmp	.-20     	; 0xef2 <vfprintf+0x39a>
     f06:	f6 01       	movw	r30, r12
     f08:	86 81       	ldd	r24, Z+6	; 0x06
     f0a:	97 81       	ldd	r25, Z+7	; 0x07
     f0c:	02 c0       	rjmp	.+4      	; 0xf12 <vfprintf+0x3ba>
     f0e:	8f ef       	ldi	r24, 0xFF	; 255
     f10:	9f ef       	ldi	r25, 0xFF	; 255
     f12:	2b 96       	adiw	r28, 0x0b	; 11
     f14:	e2 e1       	ldi	r30, 0x12	; 18
     f16:	0c 94 59 08 	jmp	0x10b2	; 0x10b2 <__epilogue_restores__>

00000f1a <strnlen_P>:
     f1a:	fc 01       	movw	r30, r24
     f1c:	05 90       	lpm	r0, Z+
     f1e:	61 50       	subi	r22, 0x01	; 1
     f20:	70 40       	sbci	r23, 0x00	; 0
     f22:	01 10       	cpse	r0, r1
     f24:	d8 f7       	brcc	.-10     	; 0xf1c <strnlen_P+0x2>
     f26:	80 95       	com	r24
     f28:	90 95       	com	r25
     f2a:	8e 0f       	add	r24, r30
     f2c:	9f 1f       	adc	r25, r31
     f2e:	08 95       	ret

00000f30 <strnlen>:
     f30:	fc 01       	movw	r30, r24
     f32:	61 50       	subi	r22, 0x01	; 1
     f34:	70 40       	sbci	r23, 0x00	; 0
     f36:	01 90       	ld	r0, Z+
     f38:	01 10       	cpse	r0, r1
     f3a:	d8 f7       	brcc	.-10     	; 0xf32 <strnlen+0x2>
     f3c:	80 95       	com	r24
     f3e:	90 95       	com	r25
     f40:	8e 0f       	add	r24, r30
     f42:	9f 1f       	adc	r25, r31
     f44:	08 95       	ret

00000f46 <fputc>:
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	fb 01       	movw	r30, r22
     f50:	23 81       	ldd	r18, Z+3	; 0x03
     f52:	21 fd       	sbrc	r18, 1
     f54:	03 c0       	rjmp	.+6      	; 0xf5c <fputc+0x16>
     f56:	8f ef       	ldi	r24, 0xFF	; 255
     f58:	9f ef       	ldi	r25, 0xFF	; 255
     f5a:	2c c0       	rjmp	.+88     	; 0xfb4 <fputc+0x6e>
     f5c:	22 ff       	sbrs	r18, 2
     f5e:	16 c0       	rjmp	.+44     	; 0xf8c <fputc+0x46>
     f60:	46 81       	ldd	r20, Z+6	; 0x06
     f62:	57 81       	ldd	r21, Z+7	; 0x07
     f64:	24 81       	ldd	r18, Z+4	; 0x04
     f66:	35 81       	ldd	r19, Z+5	; 0x05
     f68:	42 17       	cp	r20, r18
     f6a:	53 07       	cpc	r21, r19
     f6c:	44 f4       	brge	.+16     	; 0xf7e <fputc+0x38>
     f6e:	a0 81       	ld	r26, Z
     f70:	b1 81       	ldd	r27, Z+1	; 0x01
     f72:	9d 01       	movw	r18, r26
     f74:	2f 5f       	subi	r18, 0xFF	; 255
     f76:	3f 4f       	sbci	r19, 0xFF	; 255
     f78:	31 83       	std	Z+1, r19	; 0x01
     f7a:	20 83       	st	Z, r18
     f7c:	8c 93       	st	X, r24
     f7e:	26 81       	ldd	r18, Z+6	; 0x06
     f80:	37 81       	ldd	r19, Z+7	; 0x07
     f82:	2f 5f       	subi	r18, 0xFF	; 255
     f84:	3f 4f       	sbci	r19, 0xFF	; 255
     f86:	37 83       	std	Z+7, r19	; 0x07
     f88:	26 83       	std	Z+6, r18	; 0x06
     f8a:	14 c0       	rjmp	.+40     	; 0xfb4 <fputc+0x6e>
     f8c:	8b 01       	movw	r16, r22
     f8e:	ec 01       	movw	r28, r24
     f90:	fb 01       	movw	r30, r22
     f92:	00 84       	ldd	r0, Z+8	; 0x08
     f94:	f1 85       	ldd	r31, Z+9	; 0x09
     f96:	e0 2d       	mov	r30, r0
     f98:	09 95       	icall
     f9a:	89 2b       	or	r24, r25
     f9c:	e1 f6       	brne	.-72     	; 0xf56 <fputc+0x10>
     f9e:	d8 01       	movw	r26, r16
     fa0:	16 96       	adiw	r26, 0x06	; 6
     fa2:	8d 91       	ld	r24, X+
     fa4:	9c 91       	ld	r25, X
     fa6:	17 97       	sbiw	r26, 0x07	; 7
     fa8:	01 96       	adiw	r24, 0x01	; 1
     faa:	17 96       	adiw	r26, 0x07	; 7
     fac:	9c 93       	st	X, r25
     fae:	8e 93       	st	-X, r24
     fb0:	16 97       	sbiw	r26, 0x06	; 6
     fb2:	ce 01       	movw	r24, r28
     fb4:	df 91       	pop	r29
     fb6:	cf 91       	pop	r28
     fb8:	1f 91       	pop	r17
     fba:	0f 91       	pop	r16
     fbc:	08 95       	ret

00000fbe <__ultoa_invert>:
     fbe:	fa 01       	movw	r30, r20
     fc0:	aa 27       	eor	r26, r26
     fc2:	28 30       	cpi	r18, 0x08	; 8
     fc4:	51 f1       	breq	.+84     	; 0x101a <__ultoa_invert+0x5c>
     fc6:	20 31       	cpi	r18, 0x10	; 16
     fc8:	81 f1       	breq	.+96     	; 0x102a <__ultoa_invert+0x6c>
     fca:	e8 94       	clt
     fcc:	6f 93       	push	r22
     fce:	6e 7f       	andi	r22, 0xFE	; 254
     fd0:	6e 5f       	subi	r22, 0xFE	; 254
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	8f 4f       	sbci	r24, 0xFF	; 255
     fd6:	9f 4f       	sbci	r25, 0xFF	; 255
     fd8:	af 4f       	sbci	r26, 0xFF	; 255
     fda:	b1 e0       	ldi	r27, 0x01	; 1
     fdc:	3e d0       	rcall	.+124    	; 0x105a <__ultoa_invert+0x9c>
     fde:	b4 e0       	ldi	r27, 0x04	; 4
     fe0:	3c d0       	rcall	.+120    	; 0x105a <__ultoa_invert+0x9c>
     fe2:	67 0f       	add	r22, r23
     fe4:	78 1f       	adc	r23, r24
     fe6:	89 1f       	adc	r24, r25
     fe8:	9a 1f       	adc	r25, r26
     fea:	a1 1d       	adc	r26, r1
     fec:	68 0f       	add	r22, r24
     fee:	79 1f       	adc	r23, r25
     ff0:	8a 1f       	adc	r24, r26
     ff2:	91 1d       	adc	r25, r1
     ff4:	a1 1d       	adc	r26, r1
     ff6:	6a 0f       	add	r22, r26
     ff8:	71 1d       	adc	r23, r1
     ffa:	81 1d       	adc	r24, r1
     ffc:	91 1d       	adc	r25, r1
     ffe:	a1 1d       	adc	r26, r1
    1000:	20 d0       	rcall	.+64     	; 0x1042 <__ultoa_invert+0x84>
    1002:	09 f4       	brne	.+2      	; 0x1006 <__ultoa_invert+0x48>
    1004:	68 94       	set
    1006:	3f 91       	pop	r19
    1008:	2a e0       	ldi	r18, 0x0A	; 10
    100a:	26 9f       	mul	r18, r22
    100c:	11 24       	eor	r1, r1
    100e:	30 19       	sub	r19, r0
    1010:	30 5d       	subi	r19, 0xD0	; 208
    1012:	31 93       	st	Z+, r19
    1014:	de f6       	brtc	.-74     	; 0xfcc <__ultoa_invert+0xe>
    1016:	cf 01       	movw	r24, r30
    1018:	08 95       	ret
    101a:	46 2f       	mov	r20, r22
    101c:	47 70       	andi	r20, 0x07	; 7
    101e:	40 5d       	subi	r20, 0xD0	; 208
    1020:	41 93       	st	Z+, r20
    1022:	b3 e0       	ldi	r27, 0x03	; 3
    1024:	0f d0       	rcall	.+30     	; 0x1044 <__ultoa_invert+0x86>
    1026:	c9 f7       	brne	.-14     	; 0x101a <__ultoa_invert+0x5c>
    1028:	f6 cf       	rjmp	.-20     	; 0x1016 <__ultoa_invert+0x58>
    102a:	46 2f       	mov	r20, r22
    102c:	4f 70       	andi	r20, 0x0F	; 15
    102e:	40 5d       	subi	r20, 0xD0	; 208
    1030:	4a 33       	cpi	r20, 0x3A	; 58
    1032:	18 f0       	brcs	.+6      	; 0x103a <__ultoa_invert+0x7c>
    1034:	49 5d       	subi	r20, 0xD9	; 217
    1036:	31 fd       	sbrc	r19, 1
    1038:	40 52       	subi	r20, 0x20	; 32
    103a:	41 93       	st	Z+, r20
    103c:	02 d0       	rcall	.+4      	; 0x1042 <__ultoa_invert+0x84>
    103e:	a9 f7       	brne	.-22     	; 0x102a <__ultoa_invert+0x6c>
    1040:	ea cf       	rjmp	.-44     	; 0x1016 <__ultoa_invert+0x58>
    1042:	b4 e0       	ldi	r27, 0x04	; 4
    1044:	a6 95       	lsr	r26
    1046:	97 95       	ror	r25
    1048:	87 95       	ror	r24
    104a:	77 95       	ror	r23
    104c:	67 95       	ror	r22
    104e:	ba 95       	dec	r27
    1050:	c9 f7       	brne	.-14     	; 0x1044 <__ultoa_invert+0x86>
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	61 05       	cpc	r22, r1
    1056:	71 05       	cpc	r23, r1
    1058:	08 95       	ret
    105a:	9b 01       	movw	r18, r22
    105c:	ac 01       	movw	r20, r24
    105e:	0a 2e       	mov	r0, r26
    1060:	06 94       	lsr	r0
    1062:	57 95       	ror	r21
    1064:	47 95       	ror	r20
    1066:	37 95       	ror	r19
    1068:	27 95       	ror	r18
    106a:	ba 95       	dec	r27
    106c:	c9 f7       	brne	.-14     	; 0x1060 <__ultoa_invert+0xa2>
    106e:	62 0f       	add	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	84 1f       	adc	r24, r20
    1074:	95 1f       	adc	r25, r21
    1076:	a0 1d       	adc	r26, r0
    1078:	08 95       	ret

0000107a <__prologue_saves__>:
    107a:	2f 92       	push	r2
    107c:	3f 92       	push	r3
    107e:	4f 92       	push	r4
    1080:	5f 92       	push	r5
    1082:	6f 92       	push	r6
    1084:	7f 92       	push	r7
    1086:	8f 92       	push	r8
    1088:	9f 92       	push	r9
    108a:	af 92       	push	r10
    108c:	bf 92       	push	r11
    108e:	cf 92       	push	r12
    1090:	df 92       	push	r13
    1092:	ef 92       	push	r14
    1094:	ff 92       	push	r15
    1096:	0f 93       	push	r16
    1098:	1f 93       	push	r17
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	cd b7       	in	r28, 0x3d	; 61
    10a0:	de b7       	in	r29, 0x3e	; 62
    10a2:	ca 1b       	sub	r28, r26
    10a4:	db 0b       	sbc	r29, r27
    10a6:	0f b6       	in	r0, 0x3f	; 63
    10a8:	f8 94       	cli
    10aa:	de bf       	out	0x3e, r29	; 62
    10ac:	0f be       	out	0x3f, r0	; 63
    10ae:	cd bf       	out	0x3d, r28	; 61
    10b0:	09 94       	ijmp

000010b2 <__epilogue_restores__>:
    10b2:	2a 88       	ldd	r2, Y+18	; 0x12
    10b4:	39 88       	ldd	r3, Y+17	; 0x11
    10b6:	48 88       	ldd	r4, Y+16	; 0x10
    10b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    10bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    10be:	8c 84       	ldd	r8, Y+12	; 0x0c
    10c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    10c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    10c4:	b9 84       	ldd	r11, Y+9	; 0x09
    10c6:	c8 84       	ldd	r12, Y+8	; 0x08
    10c8:	df 80       	ldd	r13, Y+7	; 0x07
    10ca:	ee 80       	ldd	r14, Y+6	; 0x06
    10cc:	fd 80       	ldd	r15, Y+5	; 0x05
    10ce:	0c 81       	ldd	r16, Y+4	; 0x04
    10d0:	1b 81       	ldd	r17, Y+3	; 0x03
    10d2:	aa 81       	ldd	r26, Y+2	; 0x02
    10d4:	b9 81       	ldd	r27, Y+1	; 0x01
    10d6:	ce 0f       	add	r28, r30
    10d8:	d1 1d       	adc	r29, r1
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	de bf       	out	0x3e, r29	; 62
    10e0:	0f be       	out	0x3f, r0	; 63
    10e2:	cd bf       	out	0x3d, r28	; 61
    10e4:	ed 01       	movw	r28, r26
    10e6:	08 95       	ret

000010e8 <_exit>:
    10e8:	f8 94       	cli

000010ea <__stop_program>:
    10ea:	ff cf       	rjmp	.-2      	; 0x10ea <__stop_program>
